// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hybridsim.proto

#ifndef PROTOBUF_hybridsim_2eproto__INCLUDED
#define PROTOBUF_hybridsim_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace hybridsim {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hybridsim_2eproto();
void protobuf_AssignDesc_hybridsim_2eproto();
void protobuf_ShutdownFile_hybridsim_2eproto();

class Agent;
class Agents;
class Boolean;
class Empty;
class LeftClosedRightOpenTimeInterval;
class Leg;
class Link;
class Trajectories;
class Trajectory;

// ===================================================================

class LeftClosedRightOpenTimeInterval : public ::google::protobuf::Message {
 public:
  LeftClosedRightOpenTimeInterval();
  virtual ~LeftClosedRightOpenTimeInterval();

  LeftClosedRightOpenTimeInterval(const LeftClosedRightOpenTimeInterval& from);

  inline LeftClosedRightOpenTimeInterval& operator=(const LeftClosedRightOpenTimeInterval& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeftClosedRightOpenTimeInterval& default_instance();

  void Swap(LeftClosedRightOpenTimeInterval* other);

  // implements Message ----------------------------------------------

  inline LeftClosedRightOpenTimeInterval* New() const { return New(NULL); }

  LeftClosedRightOpenTimeInterval* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeftClosedRightOpenTimeInterval& from);
  void MergeFrom(const LeftClosedRightOpenTimeInterval& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeftClosedRightOpenTimeInterval* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double fromTimeIncluding = 1;
  void clear_fromtimeincluding();
  static const int kFromTimeIncludingFieldNumber = 1;
  double fromtimeincluding() const;
  void set_fromtimeincluding(double value);

  // optional double toTimeExcluding = 2;
  void clear_totimeexcluding();
  static const int kToTimeExcludingFieldNumber = 2;
  double totimeexcluding() const;
  void set_totimeexcluding(double value);

  // @@protoc_insertion_point(class_scope:hybridsim.LeftClosedRightOpenTimeInterval)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double fromtimeincluding_;
  double totimeexcluding_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_hybridsim_2eproto();
  friend void protobuf_AssignDesc_hybridsim_2eproto();
  friend void protobuf_ShutdownFile_hybridsim_2eproto();

  void InitAsDefaultInstance();
  static LeftClosedRightOpenTimeInterval* default_instance_;
};
// -------------------------------------------------------------------

class Empty : public ::google::protobuf::Message {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  void Swap(Empty* other);

  // implements Message ----------------------------------------------

  inline Empty* New() const { return New(NULL); }

  Empty* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hybridsim.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_hybridsim_2eproto();
  friend void protobuf_AssignDesc_hybridsim_2eproto();
  friend void protobuf_ShutdownFile_hybridsim_2eproto();

  void InitAsDefaultInstance();
  static Empty* default_instance_;
};
// -------------------------------------------------------------------

class Boolean : public ::google::protobuf::Message {
 public:
  Boolean();
  virtual ~Boolean();

  Boolean(const Boolean& from);

  inline Boolean& operator=(const Boolean& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Boolean& default_instance();

  void Swap(Boolean* other);

  // implements Message ----------------------------------------------

  inline Boolean* New() const { return New(NULL); }

  Boolean* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Boolean& from);
  void MergeFrom(const Boolean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Boolean* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  bool val() const;
  void set_val(bool value);

  // @@protoc_insertion_point(class_scope:hybridsim.Boolean)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool val_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_hybridsim_2eproto();
  friend void protobuf_AssignDesc_hybridsim_2eproto();
  friend void protobuf_ShutdownFile_hybridsim_2eproto();

  void InitAsDefaultInstance();
  static Boolean* default_instance_;
};
// -------------------------------------------------------------------

class Agent : public ::google::protobuf::Message {
 public:
  Agent();
  virtual ~Agent();

  Agent(const Agent& from);

  inline Agent& operator=(const Agent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Agent& default_instance();

  void Swap(Agent* other);

  // implements Message ----------------------------------------------

  inline Agent* New() const { return New(NULL); }

  Agent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Agent& from);
  void MergeFrom(const Agent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Agent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string enterId = 2;
  void clear_enterid();
  static const int kEnterIdFieldNumber = 2;
  const ::std::string& enterid() const;
  void set_enterid(const ::std::string& value);
  void set_enterid(const char* value);
  void set_enterid(const char* value, size_t size);
  ::std::string* mutable_enterid();
  ::std::string* release_enterid();
  void set_allocated_enterid(::std::string* enterid);

  // optional string leaveId = 3;
  void clear_leaveid();
  static const int kLeaveIdFieldNumber = 3;
  const ::std::string& leaveid() const;
  void set_leaveid(const ::std::string& value);
  void set_leaveid(const char* value);
  void set_leaveid(const char* value, size_t size);
  ::std::string* mutable_leaveid();
  ::std::string* release_leaveid();
  void set_allocated_leaveid(::std::string* leaveid);

  // optional double x = 4;
  void clear_x();
  static const int kXFieldNumber = 4;
  double x() const;
  void set_x(double value);

  // optional double y = 5;
  void clear_y();
  static const int kYFieldNumber = 5;
  double y() const;
  void set_y(double value);

  // optional .hybridsim.Leg leg = 6;
  bool has_leg() const;
  void clear_leg();
  static const int kLegFieldNumber = 6;
  const ::hybridsim::Leg& leg() const;
  ::hybridsim::Leg* mutable_leg();
  ::hybridsim::Leg* release_leg();
  void set_allocated_leg(::hybridsim::Leg* leg);

  // @@protoc_insertion_point(class_scope:hybridsim.Agent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr enterid_;
  ::google::protobuf::internal::ArenaStringPtr leaveid_;
  double x_;
  double y_;
  ::hybridsim::Leg* leg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_hybridsim_2eproto();
  friend void protobuf_AssignDesc_hybridsim_2eproto();
  friend void protobuf_ShutdownFile_hybridsim_2eproto();

  void InitAsDefaultInstance();
  static Agent* default_instance_;
};
// -------------------------------------------------------------------

class Leg : public ::google::protobuf::Message {
 public:
  Leg();
  virtual ~Leg();

  Leg(const Leg& from);

  inline Leg& operator=(const Leg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Leg& default_instance();

  void Swap(Leg* other);

  // implements Message ----------------------------------------------

  inline Leg* New() const { return New(NULL); }

  Leg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Leg& from);
  void MergeFrom(const Leg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Leg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hybridsim.Link link = 15;
  int link_size() const;
  void clear_link();
  static const int kLinkFieldNumber = 15;
  const ::hybridsim::Link& link(int index) const;
  ::hybridsim::Link* mutable_link(int index);
  ::hybridsim::Link* add_link();
  ::google::protobuf::RepeatedPtrField< ::hybridsim::Link >*
      mutable_link();
  const ::google::protobuf::RepeatedPtrField< ::hybridsim::Link >&
      link() const;

  // @@protoc_insertion_point(class_scope:hybridsim.Leg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::hybridsim::Link > link_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_hybridsim_2eproto();
  friend void protobuf_AssignDesc_hybridsim_2eproto();
  friend void protobuf_ShutdownFile_hybridsim_2eproto();

  void InitAsDefaultInstance();
  static Leg* default_instance_;
};
// -------------------------------------------------------------------

class Link : public ::google::protobuf::Message {
 public:
  Link();
  virtual ~Link();

  Link(const Link& from);

  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Link& default_instance();

  void Swap(Link* other);

  // implements Message ----------------------------------------------

  inline Link* New() const { return New(NULL); }

  Link* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Link* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x0 = 1;
  void clear_x0();
  static const int kX0FieldNumber = 1;
  double x0() const;
  void set_x0(double value);

  // optional double y0 = 2;
  void clear_y0();
  static const int kY0FieldNumber = 2;
  double y0() const;
  void set_y0(double value);

  // optional double x1 = 3;
  void clear_x1();
  static const int kX1FieldNumber = 3;
  double x1() const;
  void set_x1(double value);

  // optional double y1 = 4;
  void clear_y1();
  static const int kY1FieldNumber = 4;
  double y1() const;
  void set_y1(double value);

  // optional string id = 5;
  void clear_id();
  static const int kIdFieldNumber = 5;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:hybridsim.Link)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double x0_;
  double y0_;
  double x1_;
  double y1_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_hybridsim_2eproto();
  friend void protobuf_AssignDesc_hybridsim_2eproto();
  friend void protobuf_ShutdownFile_hybridsim_2eproto();

  void InitAsDefaultInstance();
  static Link* default_instance_;
};
// -------------------------------------------------------------------

class Agents : public ::google::protobuf::Message {
 public:
  Agents();
  virtual ~Agents();

  Agents(const Agents& from);

  inline Agents& operator=(const Agents& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Agents& default_instance();

  void Swap(Agents* other);

  // implements Message ----------------------------------------------

  inline Agents* New() const { return New(NULL); }

  Agents* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Agents& from);
  void MergeFrom(const Agents& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Agents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hybridsim.Agent agents = 1;
  int agents_size() const;
  void clear_agents();
  static const int kAgentsFieldNumber = 1;
  const ::hybridsim::Agent& agents(int index) const;
  ::hybridsim::Agent* mutable_agents(int index);
  ::hybridsim::Agent* add_agents();
  ::google::protobuf::RepeatedPtrField< ::hybridsim::Agent >*
      mutable_agents();
  const ::google::protobuf::RepeatedPtrField< ::hybridsim::Agent >&
      agents() const;

  // @@protoc_insertion_point(class_scope:hybridsim.Agents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::hybridsim::Agent > agents_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_hybridsim_2eproto();
  friend void protobuf_AssignDesc_hybridsim_2eproto();
  friend void protobuf_ShutdownFile_hybridsim_2eproto();

  void InitAsDefaultInstance();
  static Agents* default_instance_;
};
// -------------------------------------------------------------------

class Trajectory : public ::google::protobuf::Message {
 public:
  Trajectory();
  virtual ~Trajectory();

  Trajectory(const Trajectory& from);

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trajectory& default_instance();

  void Swap(Trajectory* other);

  // implements Message ----------------------------------------------

  inline Trajectory* New() const { return New(NULL); }

  Trajectory* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Trajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional double x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  double x() const;
  void set_x(double value);

  // optional double y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  double y() const;
  void set_y(double value);

  // optional double spd = 4;
  void clear_spd();
  static const int kSpdFieldNumber = 4;
  double spd() const;
  void set_spd(double value);

  // optional string linkId = 5;
  void clear_linkid();
  static const int kLinkIdFieldNumber = 5;
  const ::std::string& linkid() const;
  void set_linkid(const ::std::string& value);
  void set_linkid(const char* value);
  void set_linkid(const char* value, size_t size);
  ::std::string* mutable_linkid();
  ::std::string* release_linkid();
  void set_allocated_linkid(::std::string* linkid);

  // @@protoc_insertion_point(class_scope:hybridsim.Trajectory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  double x_;
  double y_;
  double spd_;
  ::google::protobuf::internal::ArenaStringPtr linkid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_hybridsim_2eproto();
  friend void protobuf_AssignDesc_hybridsim_2eproto();
  friend void protobuf_ShutdownFile_hybridsim_2eproto();

  void InitAsDefaultInstance();
  static Trajectory* default_instance_;
};
// -------------------------------------------------------------------

class Trajectories : public ::google::protobuf::Message {
 public:
  Trajectories();
  virtual ~Trajectories();

  Trajectories(const Trajectories& from);

  inline Trajectories& operator=(const Trajectories& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trajectories& default_instance();

  void Swap(Trajectories* other);

  // implements Message ----------------------------------------------

  inline Trajectories* New() const { return New(NULL); }

  Trajectories* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Trajectories& from);
  void MergeFrom(const Trajectories& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Trajectories* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hybridsim.Trajectory trajectories = 1;
  int trajectories_size() const;
  void clear_trajectories();
  static const int kTrajectoriesFieldNumber = 1;
  const ::hybridsim::Trajectory& trajectories(int index) const;
  ::hybridsim::Trajectory* mutable_trajectories(int index);
  ::hybridsim::Trajectory* add_trajectories();
  ::google::protobuf::RepeatedPtrField< ::hybridsim::Trajectory >*
      mutable_trajectories();
  const ::google::protobuf::RepeatedPtrField< ::hybridsim::Trajectory >&
      trajectories() const;

  // @@protoc_insertion_point(class_scope:hybridsim.Trajectories)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::hybridsim::Trajectory > trajectories_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_hybridsim_2eproto();
  friend void protobuf_AssignDesc_hybridsim_2eproto();
  friend void protobuf_ShutdownFile_hybridsim_2eproto();

  void InitAsDefaultInstance();
  static Trajectories* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LeftClosedRightOpenTimeInterval

// optional double fromTimeIncluding = 1;
inline void LeftClosedRightOpenTimeInterval::clear_fromtimeincluding() {
  fromtimeincluding_ = 0;
}
inline double LeftClosedRightOpenTimeInterval::fromtimeincluding() const {
  // @@protoc_insertion_point(field_get:hybridsim.LeftClosedRightOpenTimeInterval.fromTimeIncluding)
  return fromtimeincluding_;
}
inline void LeftClosedRightOpenTimeInterval::set_fromtimeincluding(double value) {
  
  fromtimeincluding_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.LeftClosedRightOpenTimeInterval.fromTimeIncluding)
}

// optional double toTimeExcluding = 2;
inline void LeftClosedRightOpenTimeInterval::clear_totimeexcluding() {
  totimeexcluding_ = 0;
}
inline double LeftClosedRightOpenTimeInterval::totimeexcluding() const {
  // @@protoc_insertion_point(field_get:hybridsim.LeftClosedRightOpenTimeInterval.toTimeExcluding)
  return totimeexcluding_;
}
inline void LeftClosedRightOpenTimeInterval::set_totimeexcluding(double value) {
  
  totimeexcluding_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.LeftClosedRightOpenTimeInterval.toTimeExcluding)
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// Boolean

// optional bool val = 1;
inline void Boolean::clear_val() {
  val_ = false;
}
inline bool Boolean::val() const {
  // @@protoc_insertion_point(field_get:hybridsim.Boolean.val)
  return val_;
}
inline void Boolean::set_val(bool value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Boolean.val)
}

// -------------------------------------------------------------------

// Agent

// optional string id = 1;
inline void Agent::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Agent::id() const {
  // @@protoc_insertion_point(field_get:hybridsim.Agent.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Agent::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridsim.Agent.id)
}
inline void Agent::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridsim.Agent.id)
}
inline void Agent::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridsim.Agent.id)
}
inline ::std::string* Agent::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:hybridsim.Agent.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Agent::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Agent::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:hybridsim.Agent.id)
}

// optional string enterId = 2;
inline void Agent::clear_enterid() {
  enterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Agent::enterid() const {
  // @@protoc_insertion_point(field_get:hybridsim.Agent.enterId)
  return enterid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Agent::set_enterid(const ::std::string& value) {
  
  enterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridsim.Agent.enterId)
}
inline void Agent::set_enterid(const char* value) {
  
  enterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridsim.Agent.enterId)
}
inline void Agent::set_enterid(const char* value, size_t size) {
  
  enterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridsim.Agent.enterId)
}
inline ::std::string* Agent::mutable_enterid() {
  
  // @@protoc_insertion_point(field_mutable:hybridsim.Agent.enterId)
  return enterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Agent::release_enterid() {
  
  return enterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Agent::set_allocated_enterid(::std::string* enterid) {
  if (enterid != NULL) {
    
  } else {
    
  }
  enterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enterid);
  // @@protoc_insertion_point(field_set_allocated:hybridsim.Agent.enterId)
}

// optional string leaveId = 3;
inline void Agent::clear_leaveid() {
  leaveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Agent::leaveid() const {
  // @@protoc_insertion_point(field_get:hybridsim.Agent.leaveId)
  return leaveid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Agent::set_leaveid(const ::std::string& value) {
  
  leaveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridsim.Agent.leaveId)
}
inline void Agent::set_leaveid(const char* value) {
  
  leaveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridsim.Agent.leaveId)
}
inline void Agent::set_leaveid(const char* value, size_t size) {
  
  leaveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridsim.Agent.leaveId)
}
inline ::std::string* Agent::mutable_leaveid() {
  
  // @@protoc_insertion_point(field_mutable:hybridsim.Agent.leaveId)
  return leaveid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Agent::release_leaveid() {
  
  return leaveid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Agent::set_allocated_leaveid(::std::string* leaveid) {
  if (leaveid != NULL) {
    
  } else {
    
  }
  leaveid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaveid);
  // @@protoc_insertion_point(field_set_allocated:hybridsim.Agent.leaveId)
}

// optional double x = 4;
inline void Agent::clear_x() {
  x_ = 0;
}
inline double Agent::x() const {
  // @@protoc_insertion_point(field_get:hybridsim.Agent.x)
  return x_;
}
inline void Agent::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Agent.x)
}

// optional double y = 5;
inline void Agent::clear_y() {
  y_ = 0;
}
inline double Agent::y() const {
  // @@protoc_insertion_point(field_get:hybridsim.Agent.y)
  return y_;
}
inline void Agent::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Agent.y)
}

// optional .hybridsim.Leg leg = 6;
inline bool Agent::has_leg() const {
  return !_is_default_instance_ && leg_ != NULL;
}
inline void Agent::clear_leg() {
  if (GetArenaNoVirtual() == NULL && leg_ != NULL) delete leg_;
  leg_ = NULL;
}
inline const ::hybridsim::Leg& Agent::leg() const {
  // @@protoc_insertion_point(field_get:hybridsim.Agent.leg)
  return leg_ != NULL ? *leg_ : *default_instance_->leg_;
}
inline ::hybridsim::Leg* Agent::mutable_leg() {
  
  if (leg_ == NULL) {
    leg_ = new ::hybridsim::Leg;
  }
  // @@protoc_insertion_point(field_mutable:hybridsim.Agent.leg)
  return leg_;
}
inline ::hybridsim::Leg* Agent::release_leg() {
  
  ::hybridsim::Leg* temp = leg_;
  leg_ = NULL;
  return temp;
}
inline void Agent::set_allocated_leg(::hybridsim::Leg* leg) {
  delete leg_;
  leg_ = leg;
  if (leg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hybridsim.Agent.leg)
}

// -------------------------------------------------------------------

// Leg

// repeated .hybridsim.Link link = 15;
inline int Leg::link_size() const {
  return link_.size();
}
inline void Leg::clear_link() {
  link_.Clear();
}
inline const ::hybridsim::Link& Leg::link(int index) const {
  // @@protoc_insertion_point(field_get:hybridsim.Leg.link)
  return link_.Get(index);
}
inline ::hybridsim::Link* Leg::mutable_link(int index) {
  // @@protoc_insertion_point(field_mutable:hybridsim.Leg.link)
  return link_.Mutable(index);
}
inline ::hybridsim::Link* Leg::add_link() {
  // @@protoc_insertion_point(field_add:hybridsim.Leg.link)
  return link_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hybridsim::Link >*
Leg::mutable_link() {
  // @@protoc_insertion_point(field_mutable_list:hybridsim.Leg.link)
  return &link_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hybridsim::Link >&
Leg::link() const {
  // @@protoc_insertion_point(field_list:hybridsim.Leg.link)
  return link_;
}

// -------------------------------------------------------------------

// Link

// optional double x0 = 1;
inline void Link::clear_x0() {
  x0_ = 0;
}
inline double Link::x0() const {
  // @@protoc_insertion_point(field_get:hybridsim.Link.x0)
  return x0_;
}
inline void Link::set_x0(double value) {
  
  x0_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Link.x0)
}

// optional double y0 = 2;
inline void Link::clear_y0() {
  y0_ = 0;
}
inline double Link::y0() const {
  // @@protoc_insertion_point(field_get:hybridsim.Link.y0)
  return y0_;
}
inline void Link::set_y0(double value) {
  
  y0_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Link.y0)
}

// optional double x1 = 3;
inline void Link::clear_x1() {
  x1_ = 0;
}
inline double Link::x1() const {
  // @@protoc_insertion_point(field_get:hybridsim.Link.x1)
  return x1_;
}
inline void Link::set_x1(double value) {
  
  x1_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Link.x1)
}

// optional double y1 = 4;
inline void Link::clear_y1() {
  y1_ = 0;
}
inline double Link::y1() const {
  // @@protoc_insertion_point(field_get:hybridsim.Link.y1)
  return y1_;
}
inline void Link::set_y1(double value) {
  
  y1_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Link.y1)
}

// optional string id = 5;
inline void Link::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Link::id() const {
  // @@protoc_insertion_point(field_get:hybridsim.Link.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridsim.Link.id)
}
inline void Link::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridsim.Link.id)
}
inline void Link::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridsim.Link.id)
}
inline ::std::string* Link::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:hybridsim.Link.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Link::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:hybridsim.Link.id)
}

// -------------------------------------------------------------------

// Agents

// repeated .hybridsim.Agent agents = 1;
inline int Agents::agents_size() const {
  return agents_.size();
}
inline void Agents::clear_agents() {
  agents_.Clear();
}
inline const ::hybridsim::Agent& Agents::agents(int index) const {
  // @@protoc_insertion_point(field_get:hybridsim.Agents.agents)
  return agents_.Get(index);
}
inline ::hybridsim::Agent* Agents::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:hybridsim.Agents.agents)
  return agents_.Mutable(index);
}
inline ::hybridsim::Agent* Agents::add_agents() {
  // @@protoc_insertion_point(field_add:hybridsim.Agents.agents)
  return agents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hybridsim::Agent >*
Agents::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:hybridsim.Agents.agents)
  return &agents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hybridsim::Agent >&
Agents::agents() const {
  // @@protoc_insertion_point(field_list:hybridsim.Agents.agents)
  return agents_;
}

// -------------------------------------------------------------------

// Trajectory

// optional string id = 1;
inline void Trajectory::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Trajectory::id() const {
  // @@protoc_insertion_point(field_get:hybridsim.Trajectory.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trajectory::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridsim.Trajectory.id)
}
inline void Trajectory::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridsim.Trajectory.id)
}
inline void Trajectory::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridsim.Trajectory.id)
}
inline ::std::string* Trajectory::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:hybridsim.Trajectory.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trajectory::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trajectory::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:hybridsim.Trajectory.id)
}

// optional double x = 2;
inline void Trajectory::clear_x() {
  x_ = 0;
}
inline double Trajectory::x() const {
  // @@protoc_insertion_point(field_get:hybridsim.Trajectory.x)
  return x_;
}
inline void Trajectory::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Trajectory.x)
}

// optional double y = 3;
inline void Trajectory::clear_y() {
  y_ = 0;
}
inline double Trajectory::y() const {
  // @@protoc_insertion_point(field_get:hybridsim.Trajectory.y)
  return y_;
}
inline void Trajectory::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Trajectory.y)
}

// optional double spd = 4;
inline void Trajectory::clear_spd() {
  spd_ = 0;
}
inline double Trajectory::spd() const {
  // @@protoc_insertion_point(field_get:hybridsim.Trajectory.spd)
  return spd_;
}
inline void Trajectory::set_spd(double value) {
  
  spd_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Trajectory.spd)
}

// optional string linkId = 5;
inline void Trajectory::clear_linkid() {
  linkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Trajectory::linkid() const {
  // @@protoc_insertion_point(field_get:hybridsim.Trajectory.linkId)
  return linkid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trajectory::set_linkid(const ::std::string& value) {
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridsim.Trajectory.linkId)
}
inline void Trajectory::set_linkid(const char* value) {
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridsim.Trajectory.linkId)
}
inline void Trajectory::set_linkid(const char* value, size_t size) {
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridsim.Trajectory.linkId)
}
inline ::std::string* Trajectory::mutable_linkid() {
  
  // @@protoc_insertion_point(field_mutable:hybridsim.Trajectory.linkId)
  return linkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trajectory::release_linkid() {
  
  return linkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trajectory::set_allocated_linkid(::std::string* linkid) {
  if (linkid != NULL) {
    
  } else {
    
  }
  linkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkid);
  // @@protoc_insertion_point(field_set_allocated:hybridsim.Trajectory.linkId)
}

// -------------------------------------------------------------------

// Trajectories

// repeated .hybridsim.Trajectory trajectories = 1;
inline int Trajectories::trajectories_size() const {
  return trajectories_.size();
}
inline void Trajectories::clear_trajectories() {
  trajectories_.Clear();
}
inline const ::hybridsim::Trajectory& Trajectories::trajectories(int index) const {
  // @@protoc_insertion_point(field_get:hybridsim.Trajectories.trajectories)
  return trajectories_.Get(index);
}
inline ::hybridsim::Trajectory* Trajectories::mutable_trajectories(int index) {
  // @@protoc_insertion_point(field_mutable:hybridsim.Trajectories.trajectories)
  return trajectories_.Mutable(index);
}
inline ::hybridsim::Trajectory* Trajectories::add_trajectories() {
  // @@protoc_insertion_point(field_add:hybridsim.Trajectories.trajectories)
  return trajectories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hybridsim::Trajectory >*
Trajectories::mutable_trajectories() {
  // @@protoc_insertion_point(field_mutable_list:hybridsim.Trajectories.trajectories)
  return &trajectories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hybridsim::Trajectory >&
Trajectories::trajectories() const {
  // @@protoc_insertion_point(field_list:hybridsim.Trajectories.trajectories)
  return trajectories_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hybridsim

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hybridsim_2eproto__INCLUDED
