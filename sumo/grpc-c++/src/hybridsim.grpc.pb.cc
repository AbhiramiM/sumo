// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: hybridsim.proto

#include "hybridsim.pb.h"
#include "hybridsim.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace hybridsim {

static const char* HybridSimulation_method_names[] = {
  "/hybridsim.HybridSimulation/simulatedTimeInerval",
  "/hybridsim.HybridSimulation/transferAgent",
  "/hybridsim.HybridSimulation/receiveTrajectories",
  "/hybridsim.HybridSimulation/retrieveAgents",
  "/hybridsim.HybridSimulation/shutdown",
  "/hybridsim.HybridSimulation/initScenario",
};

std::unique_ptr< HybridSimulation::Stub> HybridSimulation::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< HybridSimulation::Stub> stub(new HybridSimulation::Stub(channel));
  return stub;
}

HybridSimulation::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_simulatedTimeInerval_(HybridSimulation_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_transferAgent_(HybridSimulation_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_receiveTrajectories_(HybridSimulation_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_retrieveAgents_(HybridSimulation_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_shutdown_(HybridSimulation_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_initScenario_(HybridSimulation_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HybridSimulation::Stub::simulatedTimeInerval(::grpc::ClientContext* context, const ::hybridsim::LeftClosedRightOpenTimeInterval& request, ::hybridsim::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_simulatedTimeInerval_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hybridsim::Empty>* HybridSimulation::Stub::AsyncsimulatedTimeInervalRaw(::grpc::ClientContext* context, const ::hybridsim::LeftClosedRightOpenTimeInterval& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::hybridsim::Empty>(channel_.get(), cq, rpcmethod_simulatedTimeInerval_, context, request);
}

::grpc::Status HybridSimulation::Stub::transferAgent(::grpc::ClientContext* context, const ::hybridsim::Agent& request, ::hybridsim::Boolean* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_transferAgent_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hybridsim::Boolean>* HybridSimulation::Stub::AsynctransferAgentRaw(::grpc::ClientContext* context, const ::hybridsim::Agent& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::hybridsim::Boolean>(channel_.get(), cq, rpcmethod_transferAgent_, context, request);
}

::grpc::Status HybridSimulation::Stub::receiveTrajectories(::grpc::ClientContext* context, const ::hybridsim::Empty& request, ::hybridsim::Trajectories* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_receiveTrajectories_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hybridsim::Trajectories>* HybridSimulation::Stub::AsyncreceiveTrajectoriesRaw(::grpc::ClientContext* context, const ::hybridsim::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::hybridsim::Trajectories>(channel_.get(), cq, rpcmethod_receiveTrajectories_, context, request);
}

::grpc::Status HybridSimulation::Stub::retrieveAgents(::grpc::ClientContext* context, const ::hybridsim::Empty& request, ::hybridsim::Agents* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_retrieveAgents_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hybridsim::Agents>* HybridSimulation::Stub::AsyncretrieveAgentsRaw(::grpc::ClientContext* context, const ::hybridsim::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::hybridsim::Agents>(channel_.get(), cq, rpcmethod_retrieveAgents_, context, request);
}

::grpc::Status HybridSimulation::Stub::shutdown(::grpc::ClientContext* context, const ::hybridsim::Empty& request, ::hybridsim::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_shutdown_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hybridsim::Empty>* HybridSimulation::Stub::AsyncshutdownRaw(::grpc::ClientContext* context, const ::hybridsim::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::hybridsim::Empty>(channel_.get(), cq, rpcmethod_shutdown_, context, request);
}

::grpc::Status HybridSimulation::Stub::initScenario(::grpc::ClientContext* context, const ::hybridsim::Scenario& request, ::hybridsim::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_initScenario_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hybridsim::Empty>* HybridSimulation::Stub::AsyncinitScenarioRaw(::grpc::ClientContext* context, const ::hybridsim::Scenario& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::hybridsim::Empty>(channel_.get(), cq, rpcmethod_initScenario_, context, request);
}

HybridSimulation::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      HybridSimulation_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< HybridSimulation::Service, ::hybridsim::LeftClosedRightOpenTimeInterval, ::hybridsim::Empty>(
          std::mem_fn(&HybridSimulation::Service::simulatedTimeInerval), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      HybridSimulation_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< HybridSimulation::Service, ::hybridsim::Agent, ::hybridsim::Boolean>(
          std::mem_fn(&HybridSimulation::Service::transferAgent), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      HybridSimulation_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< HybridSimulation::Service, ::hybridsim::Empty, ::hybridsim::Trajectories>(
          std::mem_fn(&HybridSimulation::Service::receiveTrajectories), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      HybridSimulation_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< HybridSimulation::Service, ::hybridsim::Empty, ::hybridsim::Agents>(
          std::mem_fn(&HybridSimulation::Service::retrieveAgents), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      HybridSimulation_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< HybridSimulation::Service, ::hybridsim::Empty, ::hybridsim::Empty>(
          std::mem_fn(&HybridSimulation::Service::shutdown), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      HybridSimulation_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< HybridSimulation::Service, ::hybridsim::Scenario, ::hybridsim::Empty>(
          std::mem_fn(&HybridSimulation::Service::initScenario), this)));
}

HybridSimulation::Service::~Service() {
}

::grpc::Status HybridSimulation::Service::simulatedTimeInerval(::grpc::ServerContext* context, const ::hybridsim::LeftClosedRightOpenTimeInterval* request, ::hybridsim::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HybridSimulation::Service::transferAgent(::grpc::ServerContext* context, const ::hybridsim::Agent* request, ::hybridsim::Boolean* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HybridSimulation::Service::receiveTrajectories(::grpc::ServerContext* context, const ::hybridsim::Empty* request, ::hybridsim::Trajectories* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HybridSimulation::Service::retrieveAgents(::grpc::ServerContext* context, const ::hybridsim::Empty* request, ::hybridsim::Agents* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HybridSimulation::Service::shutdown(::grpc::ServerContext* context, const ::hybridsim::Empty* request, ::hybridsim::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HybridSimulation::Service::initScenario(::grpc::ServerContext* context, const ::hybridsim::Scenario* request, ::hybridsim::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hybridsim

