// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: noninteracting.proto
#ifndef GRPC_noninteracting_2eproto__INCLUDED
#define GRPC_noninteracting_2eproto__INCLUDED

#include "noninteracting.pb.h"

#include <grpc++/support/async_stream.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/proto_utils.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/status.h>
#include <grpc++/support/stub_options.h>
#include <grpc++/support/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace noninteracting {

class PState GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status computeWalkingTime(::grpc::ClientContext* context, const ::noninteracting::CMPWlkgTm& request, ::noninteracting::SUMOTime* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::SUMOTime>> AsynccomputeWalkingTime(::grpc::ClientContext* context, const ::noninteracting::CMPWlkgTm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::SUMOTime>>(AsynccomputeWalkingTimeRaw(context, request, cq));
    }
    virtual ::grpc::Status getPosition(::grpc::ClientContext* context, const ::noninteracting::GetPos& request, ::noninteracting::Position* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::Position>> AsyncgetPosition(::grpc::ClientContext* context, const ::noninteracting::GetPos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::Position>>(AsyncgetPositionRaw(context, request, cq));
    }
    virtual ::grpc::Status getAngle(::grpc::ClientContext* context, const ::noninteracting::GetAngle& request, ::noninteracting::SUMOReal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::SUMOReal>> AsyncgetAngle(::grpc::ClientContext* context, const ::noninteracting::GetAngle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::SUMOReal>>(AsyncgetAngleRaw(context, request, cq));
    }
    virtual ::grpc::Status getWaitingTime(::grpc::ClientContext* context, const ::noninteracting::SUMOTime& request, ::noninteracting::SUMOTime* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::SUMOTime>> AsyncgetWaitingTime(::grpc::ClientContext* context, const ::noninteracting::SUMOTime& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::SUMOTime>>(AsyncgetWaitingTimeRaw(context, request, cq));
    }
    virtual ::grpc::Status getSpeed(::grpc::ClientContext* context, const ::noninteracting::MSPersonStage_Walking& request, ::noninteracting::SUMOReal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::SUMOReal>> AsyncgetSpeed(::grpc::ClientContext* context, const ::noninteracting::MSPersonStage_Walking& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::SUMOReal>>(AsyncgetSpeedRaw(context, request, cq));
    }
    virtual ::grpc::Status getNextEdge(::grpc::ClientContext* context, const ::noninteracting::MSPersonStage_Walking& request, ::noninteracting::Edge* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::Edge>> AsyncgetNextEdge(::grpc::ClientContext* context, const ::noninteracting::MSPersonStage_Walking& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::Edge>>(AsyncgetNextEdgeRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::SUMOTime>* AsynccomputeWalkingTimeRaw(::grpc::ClientContext* context, const ::noninteracting::CMPWlkgTm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::Position>* AsyncgetPositionRaw(::grpc::ClientContext* context, const ::noninteracting::GetPos& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::SUMOReal>* AsyncgetAngleRaw(::grpc::ClientContext* context, const ::noninteracting::GetAngle& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::SUMOTime>* AsyncgetWaitingTimeRaw(::grpc::ClientContext* context, const ::noninteracting::SUMOTime& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::SUMOReal>* AsyncgetSpeedRaw(::grpc::ClientContext* context, const ::noninteracting::MSPersonStage_Walking& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::Edge>* AsyncgetNextEdgeRaw(::grpc::ClientContext* context, const ::noninteracting::MSPersonStage_Walking& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::Channel>& channel);
    ::grpc::Status computeWalkingTime(::grpc::ClientContext* context, const ::noninteracting::CMPWlkgTm& request, ::noninteracting::SUMOTime* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOTime>> AsynccomputeWalkingTime(::grpc::ClientContext* context, const ::noninteracting::CMPWlkgTm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOTime>>(AsynccomputeWalkingTimeRaw(context, request, cq));
    }
    ::grpc::Status getPosition(::grpc::ClientContext* context, const ::noninteracting::GetPos& request, ::noninteracting::Position* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::Position>> AsyncgetPosition(::grpc::ClientContext* context, const ::noninteracting::GetPos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::Position>>(AsyncgetPositionRaw(context, request, cq));
    }
    ::grpc::Status getAngle(::grpc::ClientContext* context, const ::noninteracting::GetAngle& request, ::noninteracting::SUMOReal* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOReal>> AsyncgetAngle(::grpc::ClientContext* context, const ::noninteracting::GetAngle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOReal>>(AsyncgetAngleRaw(context, request, cq));
    }
    ::grpc::Status getWaitingTime(::grpc::ClientContext* context, const ::noninteracting::SUMOTime& request, ::noninteracting::SUMOTime* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOTime>> AsyncgetWaitingTime(::grpc::ClientContext* context, const ::noninteracting::SUMOTime& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOTime>>(AsyncgetWaitingTimeRaw(context, request, cq));
    }
    ::grpc::Status getSpeed(::grpc::ClientContext* context, const ::noninteracting::MSPersonStage_Walking& request, ::noninteracting::SUMOReal* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOReal>> AsyncgetSpeed(::grpc::ClientContext* context, const ::noninteracting::MSPersonStage_Walking& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOReal>>(AsyncgetSpeedRaw(context, request, cq));
    }
    ::grpc::Status getNextEdge(::grpc::ClientContext* context, const ::noninteracting::MSPersonStage_Walking& request, ::noninteracting::Edge* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::Edge>> AsyncgetNextEdge(::grpc::ClientContext* context, const ::noninteracting::MSPersonStage_Walking& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::Edge>>(AsyncgetNextEdgeRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::Channel> channel_;
    ::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOTime>* AsynccomputeWalkingTimeRaw(::grpc::ClientContext* context, const ::noninteracting::CMPWlkgTm& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::noninteracting::Position>* AsyncgetPositionRaw(::grpc::ClientContext* context, const ::noninteracting::GetPos& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOReal>* AsyncgetAngleRaw(::grpc::ClientContext* context, const ::noninteracting::GetAngle& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOTime>* AsyncgetWaitingTimeRaw(::grpc::ClientContext* context, const ::noninteracting::SUMOTime& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOReal>* AsyncgetSpeedRaw(::grpc::ClientContext* context, const ::noninteracting::MSPersonStage_Walking& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::noninteracting::Edge>* AsyncgetNextEdgeRaw(::grpc::ClientContext* context, const ::noninteracting::MSPersonStage_Walking& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_computeWalkingTime_;
    const ::grpc::RpcMethod rpcmethod_getPosition_;
    const ::grpc::RpcMethod rpcmethod_getAngle_;
    const ::grpc::RpcMethod rpcmethod_getWaitingTime_;
    const ::grpc::RpcMethod rpcmethod_getSpeed_;
    const ::grpc::RpcMethod rpcmethod_getNextEdge_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::SynchronousService {
   public:
    Service() : service_(nullptr) {}
    virtual ~Service();
    virtual ::grpc::Status computeWalkingTime(::grpc::ServerContext* context, const ::noninteracting::CMPWlkgTm* request, ::noninteracting::SUMOTime* response);
    virtual ::grpc::Status getPosition(::grpc::ServerContext* context, const ::noninteracting::GetPos* request, ::noninteracting::Position* response);
    virtual ::grpc::Status getAngle(::grpc::ServerContext* context, const ::noninteracting::GetAngle* request, ::noninteracting::SUMOReal* response);
    virtual ::grpc::Status getWaitingTime(::grpc::ServerContext* context, const ::noninteracting::SUMOTime* request, ::noninteracting::SUMOTime* response);
    virtual ::grpc::Status getSpeed(::grpc::ServerContext* context, const ::noninteracting::MSPersonStage_Walking* request, ::noninteracting::SUMOReal* response);
    virtual ::grpc::Status getNextEdge(::grpc::ServerContext* context, const ::noninteracting::MSPersonStage_Walking* request, ::noninteracting::Edge* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    ::grpc::RpcService* service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService();
    ~AsyncService() {};
    void RequestcomputeWalkingTime(::grpc::ServerContext* context, ::noninteracting::CMPWlkgTm* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::SUMOTime>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestgetPosition(::grpc::ServerContext* context, ::noninteracting::GetPos* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::Position>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestgetAngle(::grpc::ServerContext* context, ::noninteracting::GetAngle* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::SUMOReal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestgetWaitingTime(::grpc::ServerContext* context, ::noninteracting::SUMOTime* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::SUMOTime>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestgetSpeed(::grpc::ServerContext* context, ::noninteracting::MSPersonStage_Walking* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::SUMOReal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestgetNextEdge(::grpc::ServerContext* context, ::noninteracting::MSPersonStage_Walking* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::Edge>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
  };
};

}  // namespace noninteracting


#endif  // GRPC_noninteracting_2eproto__INCLUDED
