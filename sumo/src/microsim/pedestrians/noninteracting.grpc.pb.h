// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: noninteracting.proto
#ifndef GRPC_noninteracting_2eproto__INCLUDED
#define GRPC_noninteracting_2eproto__INCLUDED

#include "noninteracting.pb.h"

#include <grpc++/support/async_stream.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/proto_utils.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/status.h>
#include <grpc++/support/stub_options.h>
#include <grpc++/support/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace noninteracting {

class PBPState GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status computeWalkingTime(::grpc::ClientContext* context, const ::noninteracting::CMPWlkgTm& request, ::noninteracting::CMPWlkgTmRpl* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::CMPWlkgTmRpl>> AsynccomputeWalkingTime(::grpc::ClientContext* context, const ::noninteracting::CMPWlkgTm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::CMPWlkgTmRpl>>(AsynccomputeWalkingTimeRaw(context, request, cq));
    }
    virtual ::grpc::Status getWaitingTime(::grpc::ClientContext* context, const ::noninteracting::PBSUMOTime& request, ::noninteracting::PBSUMOTime* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::PBSUMOTime>> AsyncgetWaitingTime(::grpc::ClientContext* context, const ::noninteracting::PBSUMOTime& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::PBSUMOTime>>(AsyncgetWaitingTimeRaw(context, request, cq));
    }
    virtual ::grpc::Status getSpeed(::grpc::ClientContext* context, const ::noninteracting::PBMSPersonStage_Walking& request, ::noninteracting::PBSUMOReal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::PBSUMOReal>> AsyncgetSpeed(::grpc::ClientContext* context, const ::noninteracting::PBMSPersonStage_Walking& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::PBSUMOReal>>(AsyncgetSpeedRaw(context, request, cq));
    }
    virtual ::grpc::Status getEdgePost(::grpc::ClientContext* context, const ::noninteracting::GetEdgePos& request, ::noninteracting::PBSUMOReal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::PBSUMOReal>> AsyncgetEdgePost(::grpc::ClientContext* context, const ::noninteracting::GetEdgePos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::PBSUMOReal>>(AsyncgetEdgePostRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::CMPWlkgTmRpl>* AsynccomputeWalkingTimeRaw(::grpc::ClientContext* context, const ::noninteracting::CMPWlkgTm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::PBSUMOTime>* AsyncgetWaitingTimeRaw(::grpc::ClientContext* context, const ::noninteracting::PBSUMOTime& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::PBSUMOReal>* AsyncgetSpeedRaw(::grpc::ClientContext* context, const ::noninteracting::PBMSPersonStage_Walking& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::noninteracting::PBSUMOReal>* AsyncgetEdgePostRaw(::grpc::ClientContext* context, const ::noninteracting::GetEdgePos& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::Channel>& channel);
    ::grpc::Status computeWalkingTime(::grpc::ClientContext* context, const ::noninteracting::CMPWlkgTm& request, ::noninteracting::CMPWlkgTmRpl* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::CMPWlkgTmRpl>> AsynccomputeWalkingTime(::grpc::ClientContext* context, const ::noninteracting::CMPWlkgTm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::CMPWlkgTmRpl>>(AsynccomputeWalkingTimeRaw(context, request, cq));
    }
    ::grpc::Status getWaitingTime(::grpc::ClientContext* context, const ::noninteracting::PBSUMOTime& request, ::noninteracting::PBSUMOTime* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::PBSUMOTime>> AsyncgetWaitingTime(::grpc::ClientContext* context, const ::noninteracting::PBSUMOTime& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::PBSUMOTime>>(AsyncgetWaitingTimeRaw(context, request, cq));
    }
    ::grpc::Status getSpeed(::grpc::ClientContext* context, const ::noninteracting::PBMSPersonStage_Walking& request, ::noninteracting::PBSUMOReal* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::PBSUMOReal>> AsyncgetSpeed(::grpc::ClientContext* context, const ::noninteracting::PBMSPersonStage_Walking& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::PBSUMOReal>>(AsyncgetSpeedRaw(context, request, cq));
    }
    ::grpc::Status getEdgePost(::grpc::ClientContext* context, const ::noninteracting::GetEdgePos& request, ::noninteracting::PBSUMOReal* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::PBSUMOReal>> AsyncgetEdgePost(::grpc::ClientContext* context, const ::noninteracting::GetEdgePos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::noninteracting::PBSUMOReal>>(AsyncgetEdgePostRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::Channel> channel_;
    ::grpc::ClientAsyncResponseReader< ::noninteracting::CMPWlkgTmRpl>* AsynccomputeWalkingTimeRaw(::grpc::ClientContext* context, const ::noninteracting::CMPWlkgTm& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::noninteracting::PBSUMOTime>* AsyncgetWaitingTimeRaw(::grpc::ClientContext* context, const ::noninteracting::PBSUMOTime& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::noninteracting::PBSUMOReal>* AsyncgetSpeedRaw(::grpc::ClientContext* context, const ::noninteracting::PBMSPersonStage_Walking& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::noninteracting::PBSUMOReal>* AsyncgetEdgePostRaw(::grpc::ClientContext* context, const ::noninteracting::GetEdgePos& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_computeWalkingTime_;
    const ::grpc::RpcMethod rpcmethod_getWaitingTime_;
    const ::grpc::RpcMethod rpcmethod_getSpeed_;
    const ::grpc::RpcMethod rpcmethod_getEdgePost_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::SynchronousService {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status computeWalkingTime(::grpc::ServerContext* context, const ::noninteracting::CMPWlkgTm* request, ::noninteracting::CMPWlkgTmRpl* response);
    virtual ::grpc::Status getWaitingTime(::grpc::ServerContext* context, const ::noninteracting::PBSUMOTime* request, ::noninteracting::PBSUMOTime* response);
    virtual ::grpc::Status getSpeed(::grpc::ServerContext* context, const ::noninteracting::PBMSPersonStage_Walking* request, ::noninteracting::PBSUMOReal* response);
    virtual ::grpc::Status getEdgePost(::grpc::ServerContext* context, const ::noninteracting::GetEdgePos* request, ::noninteracting::PBSUMOReal* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    std::unique_ptr< ::grpc::RpcService> service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService();
    ~AsyncService() {};
    void RequestcomputeWalkingTime(::grpc::ServerContext* context, ::noninteracting::CMPWlkgTm* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::CMPWlkgTmRpl>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestgetWaitingTime(::grpc::ServerContext* context, ::noninteracting::PBSUMOTime* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::PBSUMOTime>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestgetSpeed(::grpc::ServerContext* context, ::noninteracting::PBMSPersonStage_Walking* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::PBSUMOReal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestgetEdgePost(::grpc::ServerContext* context, ::noninteracting::GetEdgePos* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::PBSUMOReal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
  };
};

}  // namespace noninteracting


#endif  // GRPC_noninteracting_2eproto__INCLUDED
