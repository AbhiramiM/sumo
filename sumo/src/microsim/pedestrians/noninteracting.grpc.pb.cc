// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: noninteracting.proto

#include "noninteracting.pb.h"
#include "noninteracting.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace noninteracting {

static const char* PBPState_method_names[] = {
  "/noninteracting.PBPState/computeWalkingTime",
  "/noninteracting.PBPState/getWaitingTime",
  "/noninteracting.PBPState/getSpeed",
  "/noninteracting.PBPState/getEdgePost",
};

std::unique_ptr< PBPState::Stub> PBPState::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< PBPState::Stub> stub(new PBPState::Stub(channel));
  return stub;
}

PBPState::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_computeWalkingTime_(PBPState_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getWaitingTime_(PBPState_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getSpeed_(PBPState_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getEdgePost_(PBPState_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PBPState::Stub::computeWalkingTime(::grpc::ClientContext* context, const ::noninteracting::CMPWlkgTm& request, ::noninteracting::CMPWlkgTmRpl* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_computeWalkingTime_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::noninteracting::CMPWlkgTmRpl>* PBPState::Stub::AsynccomputeWalkingTimeRaw(::grpc::ClientContext* context, const ::noninteracting::CMPWlkgTm& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::noninteracting::CMPWlkgTmRpl>(channel_.get(), cq, rpcmethod_computeWalkingTime_, context, request);
}

::grpc::Status PBPState::Stub::getWaitingTime(::grpc::ClientContext* context, const ::noninteracting::PBSUMOTime& request, ::noninteracting::PBSUMOTime* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getWaitingTime_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::noninteracting::PBSUMOTime>* PBPState::Stub::AsyncgetWaitingTimeRaw(::grpc::ClientContext* context, const ::noninteracting::PBSUMOTime& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::noninteracting::PBSUMOTime>(channel_.get(), cq, rpcmethod_getWaitingTime_, context, request);
}

::grpc::Status PBPState::Stub::getSpeed(::grpc::ClientContext* context, const ::noninteracting::PBMSPersonStage_Walking& request, ::noninteracting::PBSUMOReal* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getSpeed_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::noninteracting::PBSUMOReal>* PBPState::Stub::AsyncgetSpeedRaw(::grpc::ClientContext* context, const ::noninteracting::PBMSPersonStage_Walking& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::noninteracting::PBSUMOReal>(channel_.get(), cq, rpcmethod_getSpeed_, context, request);
}

::grpc::Status PBPState::Stub::getEdgePost(::grpc::ClientContext* context, const ::noninteracting::GetEdgePos& request, ::noninteracting::PBSUMOReal* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getEdgePost_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::noninteracting::PBSUMOReal>* PBPState::Stub::AsyncgetEdgePostRaw(::grpc::ClientContext* context, const ::noninteracting::GetEdgePos& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::noninteracting::PBSUMOReal>(channel_.get(), cq, rpcmethod_getEdgePost_, context, request);
}

PBPState::AsyncService::AsyncService() : ::grpc::AsynchronousService(PBPState_method_names, 4) {}

PBPState::Service::Service() {
}

PBPState::Service::~Service() {
}

::grpc::Status PBPState::Service::computeWalkingTime(::grpc::ServerContext* context, const ::noninteracting::CMPWlkgTm* request, ::noninteracting::CMPWlkgTmRpl* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void PBPState::AsyncService::RequestcomputeWalkingTime(::grpc::ServerContext* context, ::noninteracting::CMPWlkgTm* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::CMPWlkgTmRpl>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status PBPState::Service::getWaitingTime(::grpc::ServerContext* context, const ::noninteracting::PBSUMOTime* request, ::noninteracting::PBSUMOTime* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void PBPState::AsyncService::RequestgetWaitingTime(::grpc::ServerContext* context, ::noninteracting::PBSUMOTime* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::PBSUMOTime>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status PBPState::Service::getSpeed(::grpc::ServerContext* context, const ::noninteracting::PBMSPersonStage_Walking* request, ::noninteracting::PBSUMOReal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void PBPState::AsyncService::RequestgetSpeed(::grpc::ServerContext* context, ::noninteracting::PBMSPersonStage_Walking* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::PBSUMOReal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status PBPState::Service::getEdgePost(::grpc::ServerContext* context, const ::noninteracting::GetEdgePos* request, ::noninteracting::PBSUMOReal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void PBPState::AsyncService::RequestgetEdgePost(::grpc::ServerContext* context, ::noninteracting::GetEdgePos* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::PBSUMOReal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* PBPState::Service::service() {
  if (service_) {
    return service_.get();
  }
  service_ = std::unique_ptr< ::grpc::RpcService>(new ::grpc::RpcService());
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PBPState_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PBPState::Service, ::noninteracting::CMPWlkgTm, ::noninteracting::CMPWlkgTmRpl>(
          std::mem_fn(&PBPState::Service::computeWalkingTime), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PBPState_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PBPState::Service, ::noninteracting::PBSUMOTime, ::noninteracting::PBSUMOTime>(
          std::mem_fn(&PBPState::Service::getWaitingTime), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PBPState_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PBPState::Service, ::noninteracting::PBMSPersonStage_Walking, ::noninteracting::PBSUMOReal>(
          std::mem_fn(&PBPState::Service::getSpeed), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PBPState_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PBPState::Service, ::noninteracting::GetEdgePos, ::noninteracting::PBSUMOReal>(
          std::mem_fn(&PBPState::Service::getEdgePost), this)));
  return service_.get();
}


}  // namespace noninteracting

