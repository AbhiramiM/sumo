// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: noninteracting.proto

#include "noninteracting.pb.h"
#include "noninteracting.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace noninteracting {

static const char* PState_method_names[] = {
  "/noninteracting.PState/computeWalkingTime",
  "/noninteracting.PState/getPosition",
  "/noninteracting.PState/getAngle",
  "/noninteracting.PState/getWaitingTime",
  "/noninteracting.PState/getSpeed",
  "/noninteracting.PState/getNextEdge",
};

std::unique_ptr< PState::Stub> PState::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< PState::Stub> stub(new PState::Stub(channel));
  return stub;
}

PState::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_computeWalkingTime_(PState_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPosition_(PState_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAngle_(PState_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getWaitingTime_(PState_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getSpeed_(PState_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNextEdge_(PState_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PState::Stub::computeWalkingTime(::grpc::ClientContext* context, const ::noninteracting::CMPWlkgTm& request, ::noninteracting::SUMOTime* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_computeWalkingTime_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOTime>* PState::Stub::AsynccomputeWalkingTimeRaw(::grpc::ClientContext* context, const ::noninteracting::CMPWlkgTm& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOTime>(channel_.get(), cq, rpcmethod_computeWalkingTime_, context, request);
}

::grpc::Status PState::Stub::getPosition(::grpc::ClientContext* context, const ::noninteracting::GetPos& request, ::noninteracting::Position* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getPosition_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::noninteracting::Position>* PState::Stub::AsyncgetPositionRaw(::grpc::ClientContext* context, const ::noninteracting::GetPos& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::noninteracting::Position>(channel_.get(), cq, rpcmethod_getPosition_, context, request);
}

::grpc::Status PState::Stub::getAngle(::grpc::ClientContext* context, const ::noninteracting::GetAngle& request, ::noninteracting::SUMOReal* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getAngle_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOReal>* PState::Stub::AsyncgetAngleRaw(::grpc::ClientContext* context, const ::noninteracting::GetAngle& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOReal>(channel_.get(), cq, rpcmethod_getAngle_, context, request);
}

::grpc::Status PState::Stub::getWaitingTime(::grpc::ClientContext* context, const ::noninteracting::SUMOTime& request, ::noninteracting::SUMOTime* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getWaitingTime_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOTime>* PState::Stub::AsyncgetWaitingTimeRaw(::grpc::ClientContext* context, const ::noninteracting::SUMOTime& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOTime>(channel_.get(), cq, rpcmethod_getWaitingTime_, context, request);
}

::grpc::Status PState::Stub::getSpeed(::grpc::ClientContext* context, const ::noninteracting::MSPersonStage_Walking& request, ::noninteracting::SUMOReal* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getSpeed_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOReal>* PState::Stub::AsyncgetSpeedRaw(::grpc::ClientContext* context, const ::noninteracting::MSPersonStage_Walking& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::noninteracting::SUMOReal>(channel_.get(), cq, rpcmethod_getSpeed_, context, request);
}

::grpc::Status PState::Stub::getNextEdge(::grpc::ClientContext* context, const ::noninteracting::MSPersonStage_Walking& request, ::noninteracting::Edge* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getNextEdge_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::noninteracting::Edge>* PState::Stub::AsyncgetNextEdgeRaw(::grpc::ClientContext* context, const ::noninteracting::MSPersonStage_Walking& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::noninteracting::Edge>(channel_.get(), cq, rpcmethod_getNextEdge_, context, request);
}

PState::AsyncService::AsyncService() : ::grpc::AsynchronousService(PState_method_names, 6) {}

PState::Service::~Service() {
  delete service_;
}

::grpc::Status PState::Service::computeWalkingTime(::grpc::ServerContext* context, const ::noninteracting::CMPWlkgTm* request, ::noninteracting::SUMOTime* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void PState::AsyncService::RequestcomputeWalkingTime(::grpc::ServerContext* context, ::noninteracting::CMPWlkgTm* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::SUMOTime>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status PState::Service::getPosition(::grpc::ServerContext* context, const ::noninteracting::GetPos* request, ::noninteracting::Position* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void PState::AsyncService::RequestgetPosition(::grpc::ServerContext* context, ::noninteracting::GetPos* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::Position>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status PState::Service::getAngle(::grpc::ServerContext* context, const ::noninteracting::GetAngle* request, ::noninteracting::SUMOReal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void PState::AsyncService::RequestgetAngle(::grpc::ServerContext* context, ::noninteracting::GetAngle* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::SUMOReal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status PState::Service::getWaitingTime(::grpc::ServerContext* context, const ::noninteracting::SUMOTime* request, ::noninteracting::SUMOTime* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void PState::AsyncService::RequestgetWaitingTime(::grpc::ServerContext* context, ::noninteracting::SUMOTime* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::SUMOTime>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status PState::Service::getSpeed(::grpc::ServerContext* context, const ::noninteracting::MSPersonStage_Walking* request, ::noninteracting::SUMOReal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void PState::AsyncService::RequestgetSpeed(::grpc::ServerContext* context, ::noninteracting::MSPersonStage_Walking* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::SUMOReal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status PState::Service::getNextEdge(::grpc::ServerContext* context, const ::noninteracting::MSPersonStage_Walking* request, ::noninteracting::Edge* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void PState::AsyncService::RequestgetNextEdge(::grpc::ServerContext* context, ::noninteracting::MSPersonStage_Walking* request, ::grpc::ServerAsyncResponseWriter< ::noninteracting::Edge>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* PState::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PState_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PState::Service, ::noninteracting::CMPWlkgTm, ::noninteracting::SUMOTime>(
          std::mem_fn(&PState::Service::computeWalkingTime), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PState_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PState::Service, ::noninteracting::GetPos, ::noninteracting::Position>(
          std::mem_fn(&PState::Service::getPosition), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PState_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PState::Service, ::noninteracting::GetAngle, ::noninteracting::SUMOReal>(
          std::mem_fn(&PState::Service::getAngle), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PState_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PState::Service, ::noninteracting::SUMOTime, ::noninteracting::SUMOTime>(
          std::mem_fn(&PState::Service::getWaitingTime), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PState_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PState::Service, ::noninteracting::MSPersonStage_Walking, ::noninteracting::SUMOReal>(
          std::mem_fn(&PState::Service::getSpeed), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PState_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PState::Service, ::noninteracting::MSPersonStage_Walking, ::noninteracting::Edge>(
          std::mem_fn(&PState::Service::getNextEdge), this)));
  return service_;
}


}  // namespace noninteracting

