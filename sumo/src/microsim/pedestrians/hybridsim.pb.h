// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hybridsim.proto

#ifndef PROTOBUF_hybridsim_2eproto__INCLUDED
#define PROTOBUF_hybridsim_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace hybridsim {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hybridsim_2eproto();
void protobuf_AssignDesc_hybridsim_2eproto();
void protobuf_ShutdownFile_hybridsim_2eproto();

class Empty;
class LeftClosedRightOpenTimeInterval;

// ===================================================================

class LeftClosedRightOpenTimeInterval : public ::google::protobuf::Message {
 public:
  LeftClosedRightOpenTimeInterval();
  virtual ~LeftClosedRightOpenTimeInterval();

  LeftClosedRightOpenTimeInterval(const LeftClosedRightOpenTimeInterval& from);

  inline LeftClosedRightOpenTimeInterval& operator=(const LeftClosedRightOpenTimeInterval& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeftClosedRightOpenTimeInterval& default_instance();

  void Swap(LeftClosedRightOpenTimeInterval* other);

  // implements Message ----------------------------------------------

  inline LeftClosedRightOpenTimeInterval* New() const { return New(NULL); }

  LeftClosedRightOpenTimeInterval* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeftClosedRightOpenTimeInterval& from);
  void MergeFrom(const LeftClosedRightOpenTimeInterval& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeftClosedRightOpenTimeInterval* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double fromTimeIncluding = 1;
  void clear_fromtimeincluding();
  static const int kFromTimeIncludingFieldNumber = 1;
  double fromtimeincluding() const;
  void set_fromtimeincluding(double value);

  // optional double toTimeExcluding = 2;
  void clear_totimeexcluding();
  static const int kToTimeExcludingFieldNumber = 2;
  double totimeexcluding() const;
  void set_totimeexcluding(double value);

  // @@protoc_insertion_point(class_scope:hybridsim.LeftClosedRightOpenTimeInterval)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double fromtimeincluding_;
  double totimeexcluding_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_hybridsim_2eproto();
  friend void protobuf_AssignDesc_hybridsim_2eproto();
  friend void protobuf_ShutdownFile_hybridsim_2eproto();

  void InitAsDefaultInstance();
  static LeftClosedRightOpenTimeInterval* default_instance_;
};
// -------------------------------------------------------------------

class Empty : public ::google::protobuf::Message {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  void Swap(Empty* other);

  // implements Message ----------------------------------------------

  inline Empty* New() const { return New(NULL); }

  Empty* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hybridsim.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_hybridsim_2eproto();
  friend void protobuf_AssignDesc_hybridsim_2eproto();
  friend void protobuf_ShutdownFile_hybridsim_2eproto();

  void InitAsDefaultInstance();
  static Empty* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LeftClosedRightOpenTimeInterval

// optional double fromTimeIncluding = 1;
inline void LeftClosedRightOpenTimeInterval::clear_fromtimeincluding() {
  fromtimeincluding_ = 0;
}
inline double LeftClosedRightOpenTimeInterval::fromtimeincluding() const {
  // @@protoc_insertion_point(field_get:hybridsim.LeftClosedRightOpenTimeInterval.fromTimeIncluding)
  return fromtimeincluding_;
}
inline void LeftClosedRightOpenTimeInterval::set_fromtimeincluding(double value) {
  
  fromtimeincluding_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.LeftClosedRightOpenTimeInterval.fromTimeIncluding)
}

// optional double toTimeExcluding = 2;
inline void LeftClosedRightOpenTimeInterval::clear_totimeexcluding() {
  totimeexcluding_ = 0;
}
inline double LeftClosedRightOpenTimeInterval::totimeexcluding() const {
  // @@protoc_insertion_point(field_get:hybridsim.LeftClosedRightOpenTimeInterval.toTimeExcluding)
  return totimeexcluding_;
}
inline void LeftClosedRightOpenTimeInterval::set_totimeexcluding(double value) {
  
  totimeexcluding_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.LeftClosedRightOpenTimeInterval.toTimeExcluding)
}

// -------------------------------------------------------------------

// Empty

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hybridsim

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hybridsim_2eproto__INCLUDED
