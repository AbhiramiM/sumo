// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hybridsim.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hybridsim.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hybridsim {

namespace {

const ::google::protobuf::Descriptor* LeftClosedRightOpenTimeInterval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeftClosedRightOpenTimeInterval_reflection_ = NULL;
const ::google::protobuf::Descriptor* Empty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Empty_reflection_ = NULL;
const ::google::protobuf::Descriptor* Boolean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Boolean_reflection_ = NULL;
const ::google::protobuf::Descriptor* Agent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Agent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Leg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Leg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Link_reflection_ = NULL;
const ::google::protobuf::Descriptor* Agents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Agents_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trajectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trajectories_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trajectories_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hybridsim_2eproto() {
  protobuf_AddDesc_hybridsim_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hybridsim.proto");
  GOOGLE_CHECK(file != NULL);
  LeftClosedRightOpenTimeInterval_descriptor_ = file->message_type(0);
  static const int LeftClosedRightOpenTimeInterval_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeftClosedRightOpenTimeInterval, fromtimeincluding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeftClosedRightOpenTimeInterval, totimeexcluding_),
  };
  LeftClosedRightOpenTimeInterval_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LeftClosedRightOpenTimeInterval_descriptor_,
      LeftClosedRightOpenTimeInterval::default_instance_,
      LeftClosedRightOpenTimeInterval_offsets_,
      -1,
      -1,
      -1,
      sizeof(LeftClosedRightOpenTimeInterval),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeftClosedRightOpenTimeInterval, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeftClosedRightOpenTimeInterval, _is_default_instance_));
  Empty_descriptor_ = file->message_type(1);
  static const int Empty_offsets_[1] = {
  };
  Empty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Empty_descriptor_,
      Empty::default_instance_,
      Empty_offsets_,
      -1,
      -1,
      -1,
      sizeof(Empty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _is_default_instance_));
  Boolean_descriptor_ = file->message_type(2);
  static const int Boolean_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boolean, val_),
  };
  Boolean_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Boolean_descriptor_,
      Boolean::default_instance_,
      Boolean_offsets_,
      -1,
      -1,
      -1,
      sizeof(Boolean),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boolean, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boolean, _is_default_instance_));
  Agent_descriptor_ = file->message_type(3);
  static const int Agent_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, enterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, leaveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, leg_),
  };
  Agent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Agent_descriptor_,
      Agent::default_instance_,
      Agent_offsets_,
      -1,
      -1,
      -1,
      sizeof(Agent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, _is_default_instance_));
  Leg_descriptor_ = file->message_type(4);
  static const int Leg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leg, link_),
  };
  Leg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Leg_descriptor_,
      Leg::default_instance_,
      Leg_offsets_,
      -1,
      -1,
      -1,
      sizeof(Leg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leg, _is_default_instance_));
  Link_descriptor_ = file->message_type(5);
  static const int Link_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, x0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, y0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, y1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, id_),
  };
  Link_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Link_descriptor_,
      Link::default_instance_,
      Link_offsets_,
      -1,
      -1,
      -1,
      sizeof(Link),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _is_default_instance_));
  Agents_descriptor_ = file->message_type(6);
  static const int Agents_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agents, agents_),
  };
  Agents_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Agents_descriptor_,
      Agents::default_instance_,
      Agents_offsets_,
      -1,
      -1,
      -1,
      sizeof(Agents),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agents, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agents, _is_default_instance_));
  Trajectory_descriptor_ = file->message_type(7);
  static const int Trajectory_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, spd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, linkid_),
  };
  Trajectory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Trajectory_descriptor_,
      Trajectory::default_instance_,
      Trajectory_offsets_,
      -1,
      -1,
      -1,
      sizeof(Trajectory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _is_default_instance_));
  Trajectories_descriptor_ = file->message_type(8);
  static const int Trajectories_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectories, trajectories_),
  };
  Trajectories_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Trajectories_descriptor_,
      Trajectories::default_instance_,
      Trajectories_offsets_,
      -1,
      -1,
      -1,
      sizeof(Trajectories),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectories, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectories, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hybridsim_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LeftClosedRightOpenTimeInterval_descriptor_, &LeftClosedRightOpenTimeInterval::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Empty_descriptor_, &Empty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Boolean_descriptor_, &Boolean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Agent_descriptor_, &Agent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Leg_descriptor_, &Leg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Link_descriptor_, &Link::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Agents_descriptor_, &Agents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Trajectory_descriptor_, &Trajectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Trajectories_descriptor_, &Trajectories::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hybridsim_2eproto() {
  delete LeftClosedRightOpenTimeInterval::default_instance_;
  delete LeftClosedRightOpenTimeInterval_reflection_;
  delete Empty::default_instance_;
  delete Empty_reflection_;
  delete Boolean::default_instance_;
  delete Boolean_reflection_;
  delete Agent::default_instance_;
  delete Agent_reflection_;
  delete Leg::default_instance_;
  delete Leg_reflection_;
  delete Link::default_instance_;
  delete Link_reflection_;
  delete Agents::default_instance_;
  delete Agents_reflection_;
  delete Trajectory::default_instance_;
  delete Trajectory_reflection_;
  delete Trajectories::default_instance_;
  delete Trajectories_reflection_;
}

void protobuf_AddDesc_hybridsim_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017hybridsim.proto\022\thybridsim\"U\n\037LeftClos"
    "edRightOpenTimeInterval\022\031\n\021fromTimeInclu"
    "ding\030\001 \001(\001\022\027\n\017toTimeExcluding\030\002 \001(\001\"\007\n\005E"
    "mpty\"\026\n\007Boolean\022\013\n\003val\030\001 \001(\010\"h\n\005Agent\022\n\n"
    "\002id\030\001 \001(\t\022\017\n\007enterId\030\002 \001(\t\022\017\n\007leaveId\030\003 "
    "\001(\t\022\t\n\001x\030\004 \001(\001\022\t\n\001y\030\005 \001(\001\022\033\n\003leg\030\006 \001(\0132\016"
    ".hybridsim.Leg\"$\n\003Leg\022\035\n\004link\030\017 \003(\0132\017.hy"
    "bridsim.Link\"B\n\004Link\022\n\n\002x0\030\001 \001(\001\022\n\n\002y0\030\002"
    " \001(\001\022\n\n\002x1\030\003 \001(\001\022\n\n\002y1\030\004 \001(\001\022\n\n\002id\030\005 \001(\t"
    "\"*\n\006Agents\022 \n\006agents\030\001 \003(\0132\020.hybridsim.A"
    "gent\"K\n\nTrajectory\022\n\n\002id\030\001 \001(\t\022\t\n\001x\030\002 \001("
    "\001\022\t\n\001y\030\003 \001(\001\022\013\n\003spd\030\004 \001(\001\022\016\n\006linkId\030\005 \001("
    "\t\";\n\014Trajectories\022+\n\014trajectories\030\001 \003(\0132"
    "\025.hybridsim.Trajectory2\240\002\n\020HybridSimulat"
    "ion\022V\n\024simulatedTimeInerval\022*.hybridsim."
    "LeftClosedRightOpenTimeInterval\032\020.hybrid"
    "sim.Empty\"\000\0227\n\rtransferAgent\022\020.hybridsim"
    ".Agent\032\022.hybridsim.Boolean\"\000\022B\n\023receiveT"
    "rajectories\022\020.hybridsim.Empty\032\027.hybridsi"
    "m.Trajectories\"\000\0227\n\016retrieveAgents\022\020.hyb"
    "ridsim.Empty\032\021.hybridsim.Agents\"\000B)\n\025de."
    "dlr.sumo.hybridsimB\016HybridSimProtoP\000b\006pr"
    "oto3", 884);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hybridsim.proto", &protobuf_RegisterTypes);
  LeftClosedRightOpenTimeInterval::default_instance_ = new LeftClosedRightOpenTimeInterval();
  Empty::default_instance_ = new Empty();
  Boolean::default_instance_ = new Boolean();
  Agent::default_instance_ = new Agent();
  Leg::default_instance_ = new Leg();
  Link::default_instance_ = new Link();
  Agents::default_instance_ = new Agents();
  Trajectory::default_instance_ = new Trajectory();
  Trajectories::default_instance_ = new Trajectories();
  LeftClosedRightOpenTimeInterval::default_instance_->InitAsDefaultInstance();
  Empty::default_instance_->InitAsDefaultInstance();
  Boolean::default_instance_->InitAsDefaultInstance();
  Agent::default_instance_->InitAsDefaultInstance();
  Leg::default_instance_->InitAsDefaultInstance();
  Link::default_instance_->InitAsDefaultInstance();
  Agents::default_instance_->InitAsDefaultInstance();
  Trajectory::default_instance_->InitAsDefaultInstance();
  Trajectories::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hybridsim_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hybridsim_2eproto {
  StaticDescriptorInitializer_hybridsim_2eproto() {
    protobuf_AddDesc_hybridsim_2eproto();
  }
} static_descriptor_initializer_hybridsim_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeftClosedRightOpenTimeInterval::kFromTimeIncludingFieldNumber;
const int LeftClosedRightOpenTimeInterval::kToTimeExcludingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeftClosedRightOpenTimeInterval::LeftClosedRightOpenTimeInterval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridsim.LeftClosedRightOpenTimeInterval)
}

void LeftClosedRightOpenTimeInterval::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LeftClosedRightOpenTimeInterval::LeftClosedRightOpenTimeInterval(const LeftClosedRightOpenTimeInterval& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hybridsim.LeftClosedRightOpenTimeInterval)
}

void LeftClosedRightOpenTimeInterval::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  fromtimeincluding_ = 0;
  totimeexcluding_ = 0;
}

LeftClosedRightOpenTimeInterval::~LeftClosedRightOpenTimeInterval() {
  // @@protoc_insertion_point(destructor:hybridsim.LeftClosedRightOpenTimeInterval)
  SharedDtor();
}

void LeftClosedRightOpenTimeInterval::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeftClosedRightOpenTimeInterval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeftClosedRightOpenTimeInterval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeftClosedRightOpenTimeInterval_descriptor_;
}

const LeftClosedRightOpenTimeInterval& LeftClosedRightOpenTimeInterval::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hybridsim_2eproto();
  return *default_instance_;
}

LeftClosedRightOpenTimeInterval* LeftClosedRightOpenTimeInterval::default_instance_ = NULL;

LeftClosedRightOpenTimeInterval* LeftClosedRightOpenTimeInterval::New(::google::protobuf::Arena* arena) const {
  LeftClosedRightOpenTimeInterval* n = new LeftClosedRightOpenTimeInterval;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeftClosedRightOpenTimeInterval::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LeftClosedRightOpenTimeInterval*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fromtimeincluding_, totimeexcluding_);

#undef ZR_HELPER_
#undef ZR_

}

bool LeftClosedRightOpenTimeInterval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridsim.LeftClosedRightOpenTimeInterval)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double fromTimeIncluding = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fromtimeincluding_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_toTimeExcluding;
        break;
      }

      // optional double toTimeExcluding = 2;
      case 2: {
        if (tag == 17) {
         parse_toTimeExcluding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totimeexcluding_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridsim.LeftClosedRightOpenTimeInterval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridsim.LeftClosedRightOpenTimeInterval)
  return false;
#undef DO_
}

void LeftClosedRightOpenTimeInterval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridsim.LeftClosedRightOpenTimeInterval)
  // optional double fromTimeIncluding = 1;
  if (this->fromtimeincluding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->fromtimeincluding(), output);
  }

  // optional double toTimeExcluding = 2;
  if (this->totimeexcluding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->totimeexcluding(), output);
  }

  // @@protoc_insertion_point(serialize_end:hybridsim.LeftClosedRightOpenTimeInterval)
}

::google::protobuf::uint8* LeftClosedRightOpenTimeInterval::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybridsim.LeftClosedRightOpenTimeInterval)
  // optional double fromTimeIncluding = 1;
  if (this->fromtimeincluding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->fromtimeincluding(), target);
  }

  // optional double toTimeExcluding = 2;
  if (this->totimeexcluding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->totimeexcluding(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hybridsim.LeftClosedRightOpenTimeInterval)
  return target;
}

int LeftClosedRightOpenTimeInterval::ByteSize() const {
  int total_size = 0;

  // optional double fromTimeIncluding = 1;
  if (this->fromtimeincluding() != 0) {
    total_size += 1 + 8;
  }

  // optional double toTimeExcluding = 2;
  if (this->totimeexcluding() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeftClosedRightOpenTimeInterval::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LeftClosedRightOpenTimeInterval* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LeftClosedRightOpenTimeInterval>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeftClosedRightOpenTimeInterval::MergeFrom(const LeftClosedRightOpenTimeInterval& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.fromtimeincluding() != 0) {
    set_fromtimeincluding(from.fromtimeincluding());
  }
  if (from.totimeexcluding() != 0) {
    set_totimeexcluding(from.totimeexcluding());
  }
}

void LeftClosedRightOpenTimeInterval::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeftClosedRightOpenTimeInterval::CopyFrom(const LeftClosedRightOpenTimeInterval& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeftClosedRightOpenTimeInterval::IsInitialized() const {

  return true;
}

void LeftClosedRightOpenTimeInterval::Swap(LeftClosedRightOpenTimeInterval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeftClosedRightOpenTimeInterval::InternalSwap(LeftClosedRightOpenTimeInterval* other) {
  std::swap(fromtimeincluding_, other->fromtimeincluding_);
  std::swap(totimeexcluding_, other->totimeexcluding_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeftClosedRightOpenTimeInterval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeftClosedRightOpenTimeInterval_descriptor_;
  metadata.reflection = LeftClosedRightOpenTimeInterval_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeftClosedRightOpenTimeInterval

// optional double fromTimeIncluding = 1;
void LeftClosedRightOpenTimeInterval::clear_fromtimeincluding() {
  fromtimeincluding_ = 0;
}
 double LeftClosedRightOpenTimeInterval::fromtimeincluding() const {
  // @@protoc_insertion_point(field_get:hybridsim.LeftClosedRightOpenTimeInterval.fromTimeIncluding)
  return fromtimeincluding_;
}
 void LeftClosedRightOpenTimeInterval::set_fromtimeincluding(double value) {
  
  fromtimeincluding_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.LeftClosedRightOpenTimeInterval.fromTimeIncluding)
}

// optional double toTimeExcluding = 2;
void LeftClosedRightOpenTimeInterval::clear_totimeexcluding() {
  totimeexcluding_ = 0;
}
 double LeftClosedRightOpenTimeInterval::totimeexcluding() const {
  // @@protoc_insertion_point(field_get:hybridsim.LeftClosedRightOpenTimeInterval.toTimeExcluding)
  return totimeexcluding_;
}
 void LeftClosedRightOpenTimeInterval::set_totimeexcluding(double value) {
  
  totimeexcluding_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.LeftClosedRightOpenTimeInterval.toTimeExcluding)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridsim.Empty)
}

void Empty::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hybridsim.Empty)
}

void Empty::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:hybridsim.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Empty_descriptor_;
}

const Empty& Empty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hybridsim_2eproto();
  return *default_instance_;
}

Empty* Empty::default_instance_ = NULL;

Empty* Empty::New(::google::protobuf::Arena* arena) const {
  Empty* n = new Empty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Empty::Clear() {
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridsim.Empty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:hybridsim.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridsim.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridsim.Empty)
  // @@protoc_insertion_point(serialize_end:hybridsim.Empty)
}

::google::protobuf::uint8* Empty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybridsim.Empty)
  // @@protoc_insertion_point(serialize_to_array_end:hybridsim.Empty)
  return target;
}

int Empty::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Empty* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {

  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Empty_descriptor_;
  metadata.reflection = Empty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Empty

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Boolean::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Boolean::Boolean()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridsim.Boolean)
}

void Boolean::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Boolean::Boolean(const Boolean& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hybridsim.Boolean)
}

void Boolean::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  val_ = false;
}

Boolean::~Boolean() {
  // @@protoc_insertion_point(destructor:hybridsim.Boolean)
  SharedDtor();
}

void Boolean::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Boolean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Boolean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Boolean_descriptor_;
}

const Boolean& Boolean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hybridsim_2eproto();
  return *default_instance_;
}

Boolean* Boolean::default_instance_ = NULL;

Boolean* Boolean::New(::google::protobuf::Arena* arena) const {
  Boolean* n = new Boolean;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Boolean::Clear() {
  val_ = false;
}

bool Boolean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridsim.Boolean)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool val = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &val_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridsim.Boolean)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridsim.Boolean)
  return false;
#undef DO_
}

void Boolean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridsim.Boolean)
  // optional bool val = 1;
  if (this->val() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->val(), output);
  }

  // @@protoc_insertion_point(serialize_end:hybridsim.Boolean)
}

::google::protobuf::uint8* Boolean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybridsim.Boolean)
  // optional bool val = 1;
  if (this->val() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->val(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hybridsim.Boolean)
  return target;
}

int Boolean::ByteSize() const {
  int total_size = 0;

  // optional bool val = 1;
  if (this->val() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Boolean::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Boolean* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Boolean>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Boolean::MergeFrom(const Boolean& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.val() != 0) {
    set_val(from.val());
  }
}

void Boolean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boolean::CopyFrom(const Boolean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boolean::IsInitialized() const {

  return true;
}

void Boolean::Swap(Boolean* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Boolean::InternalSwap(Boolean* other) {
  std::swap(val_, other->val_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Boolean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Boolean_descriptor_;
  metadata.reflection = Boolean_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Boolean

// optional bool val = 1;
void Boolean::clear_val() {
  val_ = false;
}
 bool Boolean::val() const {
  // @@protoc_insertion_point(field_get:hybridsim.Boolean.val)
  return val_;
}
 void Boolean::set_val(bool value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Boolean.val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Agent::kIdFieldNumber;
const int Agent::kEnterIdFieldNumber;
const int Agent::kLeaveIdFieldNumber;
const int Agent::kXFieldNumber;
const int Agent::kYFieldNumber;
const int Agent::kLegFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Agent::Agent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridsim.Agent)
}

void Agent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  leg_ = const_cast< ::hybridsim::Leg*>(&::hybridsim::Leg::default_instance());
}

Agent::Agent(const Agent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hybridsim.Agent)
}

void Agent::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enterid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leaveid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = 0;
  y_ = 0;
  leg_ = NULL;
}

Agent::~Agent() {
  // @@protoc_insertion_point(destructor:hybridsim.Agent)
  SharedDtor();
}

void Agent::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enterid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leaveid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete leg_;
  }
}

void Agent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Agent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Agent_descriptor_;
}

const Agent& Agent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hybridsim_2eproto();
  return *default_instance_;
}

Agent* Agent::default_instance_ = NULL;

Agent* Agent::New(::google::protobuf::Arena* arena) const {
  Agent* n = new Agent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Agent::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Agent*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leaveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && leg_ != NULL) delete leg_;
  leg_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Agent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridsim.Agent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hybridsim.Agent.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_enterId;
        break;
      }

      // optional string enterId = 2;
      case 2: {
        if (tag == 18) {
         parse_enterId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enterid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enterid().data(), this->enterid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hybridsim.Agent.enterId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_leaveId;
        break;
      }

      // optional string leaveId = 3;
      case 3: {
        if (tag == 26) {
         parse_leaveId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaveid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leaveid().data(), this->leaveid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hybridsim.Agent.leaveId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_x;
        break;
      }

      // optional double x = 4;
      case 4: {
        if (tag == 33) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_y;
        break;
      }

      // optional double y = 5;
      case 5: {
        if (tag == 41) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_leg;
        break;
      }

      // optional .hybridsim.Leg leg = 6;
      case 6: {
        if (tag == 50) {
         parse_leg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridsim.Agent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridsim.Agent)
  return false;
#undef DO_
}

void Agent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridsim.Agent)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hybridsim.Agent.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string enterId = 2;
  if (this->enterid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enterid().data(), this->enterid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hybridsim.Agent.enterId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->enterid(), output);
  }

  // optional string leaveId = 3;
  if (this->leaveid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaveid().data(), this->leaveid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hybridsim.Agent.leaveId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->leaveid(), output);
  }

  // optional double x = 4;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x(), output);
  }

  // optional double y = 5;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y(), output);
  }

  // optional .hybridsim.Leg leg = 6;
  if (this->has_leg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->leg_, output);
  }

  // @@protoc_insertion_point(serialize_end:hybridsim.Agent)
}

::google::protobuf::uint8* Agent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybridsim.Agent)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hybridsim.Agent.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string enterId = 2;
  if (this->enterid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enterid().data(), this->enterid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hybridsim.Agent.enterId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->enterid(), target);
  }

  // optional string leaveId = 3;
  if (this->leaveid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaveid().data(), this->leaveid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hybridsim.Agent.leaveId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leaveid(), target);
  }

  // optional double x = 4;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x(), target);
  }

  // optional double y = 5;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y(), target);
  }

  // optional .hybridsim.Leg leg = 6;
  if (this->has_leg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->leg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hybridsim.Agent)
  return target;
}

int Agent::ByteSize() const {
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string enterId = 2;
  if (this->enterid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->enterid());
  }

  // optional string leaveId = 3;
  if (this->leaveid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leaveid());
  }

  // optional double x = 4;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 5;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional .hybridsim.Leg leg = 6;
  if (this->has_leg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Agent::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Agent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Agent>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Agent::MergeFrom(const Agent& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.enterid().size() > 0) {

    enterid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enterid_);
  }
  if (from.leaveid().size() > 0) {

    leaveid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaveid_);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.has_leg()) {
    mutable_leg()->::hybridsim::Leg::MergeFrom(from.leg());
  }
}

void Agent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Agent::CopyFrom(const Agent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Agent::IsInitialized() const {

  return true;
}

void Agent::Swap(Agent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Agent::InternalSwap(Agent* other) {
  id_.Swap(&other->id_);
  enterid_.Swap(&other->enterid_);
  leaveid_.Swap(&other->leaveid_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(leg_, other->leg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Agent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Agent_descriptor_;
  metadata.reflection = Agent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Agent

// optional string id = 1;
void Agent::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Agent::id() const {
  // @@protoc_insertion_point(field_get:hybridsim.Agent.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Agent::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridsim.Agent.id)
}
 void Agent::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridsim.Agent.id)
}
 void Agent::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridsim.Agent.id)
}
 ::std::string* Agent::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:hybridsim.Agent.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Agent::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Agent::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:hybridsim.Agent.id)
}

// optional string enterId = 2;
void Agent::clear_enterid() {
  enterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Agent::enterid() const {
  // @@protoc_insertion_point(field_get:hybridsim.Agent.enterId)
  return enterid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Agent::set_enterid(const ::std::string& value) {
  
  enterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridsim.Agent.enterId)
}
 void Agent::set_enterid(const char* value) {
  
  enterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridsim.Agent.enterId)
}
 void Agent::set_enterid(const char* value, size_t size) {
  
  enterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridsim.Agent.enterId)
}
 ::std::string* Agent::mutable_enterid() {
  
  // @@protoc_insertion_point(field_mutable:hybridsim.Agent.enterId)
  return enterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Agent::release_enterid() {
  
  return enterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Agent::set_allocated_enterid(::std::string* enterid) {
  if (enterid != NULL) {
    
  } else {
    
  }
  enterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enterid);
  // @@protoc_insertion_point(field_set_allocated:hybridsim.Agent.enterId)
}

// optional string leaveId = 3;
void Agent::clear_leaveid() {
  leaveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Agent::leaveid() const {
  // @@protoc_insertion_point(field_get:hybridsim.Agent.leaveId)
  return leaveid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Agent::set_leaveid(const ::std::string& value) {
  
  leaveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridsim.Agent.leaveId)
}
 void Agent::set_leaveid(const char* value) {
  
  leaveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridsim.Agent.leaveId)
}
 void Agent::set_leaveid(const char* value, size_t size) {
  
  leaveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridsim.Agent.leaveId)
}
 ::std::string* Agent::mutable_leaveid() {
  
  // @@protoc_insertion_point(field_mutable:hybridsim.Agent.leaveId)
  return leaveid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Agent::release_leaveid() {
  
  return leaveid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Agent::set_allocated_leaveid(::std::string* leaveid) {
  if (leaveid != NULL) {
    
  } else {
    
  }
  leaveid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaveid);
  // @@protoc_insertion_point(field_set_allocated:hybridsim.Agent.leaveId)
}

// optional double x = 4;
void Agent::clear_x() {
  x_ = 0;
}
 double Agent::x() const {
  // @@protoc_insertion_point(field_get:hybridsim.Agent.x)
  return x_;
}
 void Agent::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Agent.x)
}

// optional double y = 5;
void Agent::clear_y() {
  y_ = 0;
}
 double Agent::y() const {
  // @@protoc_insertion_point(field_get:hybridsim.Agent.y)
  return y_;
}
 void Agent::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Agent.y)
}

// optional .hybridsim.Leg leg = 6;
bool Agent::has_leg() const {
  return !_is_default_instance_ && leg_ != NULL;
}
void Agent::clear_leg() {
  if (GetArenaNoVirtual() == NULL && leg_ != NULL) delete leg_;
  leg_ = NULL;
}
const ::hybridsim::Leg& Agent::leg() const {
  // @@protoc_insertion_point(field_get:hybridsim.Agent.leg)
  return leg_ != NULL ? *leg_ : *default_instance_->leg_;
}
::hybridsim::Leg* Agent::mutable_leg() {
  
  if (leg_ == NULL) {
    leg_ = new ::hybridsim::Leg;
  }
  // @@protoc_insertion_point(field_mutable:hybridsim.Agent.leg)
  return leg_;
}
::hybridsim::Leg* Agent::release_leg() {
  
  ::hybridsim::Leg* temp = leg_;
  leg_ = NULL;
  return temp;
}
void Agent::set_allocated_leg(::hybridsim::Leg* leg) {
  delete leg_;
  leg_ = leg;
  if (leg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hybridsim.Agent.leg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Leg::kLinkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Leg::Leg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridsim.Leg)
}

void Leg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Leg::Leg(const Leg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hybridsim.Leg)
}

void Leg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Leg::~Leg() {
  // @@protoc_insertion_point(destructor:hybridsim.Leg)
  SharedDtor();
}

void Leg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Leg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Leg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Leg_descriptor_;
}

const Leg& Leg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hybridsim_2eproto();
  return *default_instance_;
}

Leg* Leg::default_instance_ = NULL;

Leg* Leg::New(::google::protobuf::Arena* arena) const {
  Leg* n = new Leg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Leg::Clear() {
  link_.Clear();
}

bool Leg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridsim.Leg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hybridsim.Link link = 15;
      case 15: {
        if (tag == 122) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_link()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_link;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridsim.Leg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridsim.Leg)
  return false;
#undef DO_
}

void Leg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridsim.Leg)
  // repeated .hybridsim.Link link = 15;
  for (unsigned int i = 0, n = this->link_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->link(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hybridsim.Leg)
}

::google::protobuf::uint8* Leg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybridsim.Leg)
  // repeated .hybridsim.Link link = 15;
  for (unsigned int i = 0, n = this->link_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->link(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hybridsim.Leg)
  return target;
}

int Leg::ByteSize() const {
  int total_size = 0;

  // repeated .hybridsim.Link link = 15;
  total_size += 1 * this->link_size();
  for (int i = 0; i < this->link_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->link(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Leg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Leg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Leg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Leg::MergeFrom(const Leg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  link_.MergeFrom(from.link_);
}

void Leg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leg::CopyFrom(const Leg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leg::IsInitialized() const {

  return true;
}

void Leg::Swap(Leg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Leg::InternalSwap(Leg* other) {
  link_.UnsafeArenaSwap(&other->link_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Leg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Leg_descriptor_;
  metadata.reflection = Leg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Leg

// repeated .hybridsim.Link link = 15;
int Leg::link_size() const {
  return link_.size();
}
void Leg::clear_link() {
  link_.Clear();
}
const ::hybridsim::Link& Leg::link(int index) const {
  // @@protoc_insertion_point(field_get:hybridsim.Leg.link)
  return link_.Get(index);
}
::hybridsim::Link* Leg::mutable_link(int index) {
  // @@protoc_insertion_point(field_mutable:hybridsim.Leg.link)
  return link_.Mutable(index);
}
::hybridsim::Link* Leg::add_link() {
  // @@protoc_insertion_point(field_add:hybridsim.Leg.link)
  return link_.Add();
}
::google::protobuf::RepeatedPtrField< ::hybridsim::Link >*
Leg::mutable_link() {
  // @@protoc_insertion_point(field_mutable_list:hybridsim.Leg.link)
  return &link_;
}
const ::google::protobuf::RepeatedPtrField< ::hybridsim::Link >&
Leg::link() const {
  // @@protoc_insertion_point(field_list:hybridsim.Leg.link)
  return link_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Link::kX0FieldNumber;
const int Link::kY0FieldNumber;
const int Link::kX1FieldNumber;
const int Link::kY1FieldNumber;
const int Link::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Link::Link()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridsim.Link)
}

void Link::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Link::Link(const Link& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hybridsim.Link)
}

void Link::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  x0_ = 0;
  y0_ = 0;
  x1_ = 0;
  y1_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:hybridsim.Link)
  SharedDtor();
}

void Link::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Link_descriptor_;
}

const Link& Link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hybridsim_2eproto();
  return *default_instance_;
}

Link* Link::default_instance_ = NULL;

Link* Link::New(::google::protobuf::Arena* arena) const {
  Link* n = new Link;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Link::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Link*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x0_, y1_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridsim.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x0 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x0_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y0;
        break;
      }

      // optional double y0 = 2;
      case 2: {
        if (tag == 17) {
         parse_y0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y0_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_x1;
        break;
      }

      // optional double x1 = 3;
      case 3: {
        if (tag == 25) {
         parse_x1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_y1;
        break;
      }

      // optional double y1 = 4;
      case 4: {
        if (tag == 33) {
         parse_y1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_id;
        break;
      }

      // optional string id = 5;
      case 5: {
        if (tag == 42) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hybridsim.Link.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridsim.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridsim.Link)
  return false;
#undef DO_
}

void Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridsim.Link)
  // optional double x0 = 1;
  if (this->x0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x0(), output);
  }

  // optional double y0 = 2;
  if (this->y0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y0(), output);
  }

  // optional double x1 = 3;
  if (this->x1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x1(), output);
  }

  // optional double y1 = 4;
  if (this->y1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y1(), output);
  }

  // optional string id = 5;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hybridsim.Link.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:hybridsim.Link)
}

::google::protobuf::uint8* Link::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybridsim.Link)
  // optional double x0 = 1;
  if (this->x0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x0(), target);
  }

  // optional double y0 = 2;
  if (this->y0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y0(), target);
  }

  // optional double x1 = 3;
  if (this->x1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x1(), target);
  }

  // optional double y1 = 4;
  if (this->y1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y1(), target);
  }

  // optional string id = 5;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hybridsim.Link.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hybridsim.Link)
  return target;
}

int Link::ByteSize() const {
  int total_size = 0;

  // optional double x0 = 1;
  if (this->x0() != 0) {
    total_size += 1 + 8;
  }

  // optional double y0 = 2;
  if (this->y0() != 0) {
    total_size += 1 + 8;
  }

  // optional double x1 = 3;
  if (this->x1() != 0) {
    total_size += 1 + 8;
  }

  // optional double y1 = 4;
  if (this->y1() != 0) {
    total_size += 1 + 8;
  }

  // optional string id = 5;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Link::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Link* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Link>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x0() != 0) {
    set_x0(from.x0());
  }
  if (from.y0() != 0) {
    set_y0(from.y0());
  }
  if (from.x1() != 0) {
    set_x1(from.x1());
  }
  if (from.y1() != 0) {
    set_y1(from.y1());
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void Link::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {

  return true;
}

void Link::Swap(Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Link::InternalSwap(Link* other) {
  std::swap(x0_, other->x0_);
  std::swap(y0_, other->y0_);
  std::swap(x1_, other->x1_);
  std::swap(y1_, other->y1_);
  id_.Swap(&other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Link_descriptor_;
  metadata.reflection = Link_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Link

// optional double x0 = 1;
void Link::clear_x0() {
  x0_ = 0;
}
 double Link::x0() const {
  // @@protoc_insertion_point(field_get:hybridsim.Link.x0)
  return x0_;
}
 void Link::set_x0(double value) {
  
  x0_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Link.x0)
}

// optional double y0 = 2;
void Link::clear_y0() {
  y0_ = 0;
}
 double Link::y0() const {
  // @@protoc_insertion_point(field_get:hybridsim.Link.y0)
  return y0_;
}
 void Link::set_y0(double value) {
  
  y0_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Link.y0)
}

// optional double x1 = 3;
void Link::clear_x1() {
  x1_ = 0;
}
 double Link::x1() const {
  // @@protoc_insertion_point(field_get:hybridsim.Link.x1)
  return x1_;
}
 void Link::set_x1(double value) {
  
  x1_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Link.x1)
}

// optional double y1 = 4;
void Link::clear_y1() {
  y1_ = 0;
}
 double Link::y1() const {
  // @@protoc_insertion_point(field_get:hybridsim.Link.y1)
  return y1_;
}
 void Link::set_y1(double value) {
  
  y1_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Link.y1)
}

// optional string id = 5;
void Link::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Link::id() const {
  // @@protoc_insertion_point(field_get:hybridsim.Link.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Link::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridsim.Link.id)
}
 void Link::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridsim.Link.id)
}
 void Link::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridsim.Link.id)
}
 ::std::string* Link::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:hybridsim.Link.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Link::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Link::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:hybridsim.Link.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Agents::kAgentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Agents::Agents()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridsim.Agents)
}

void Agents::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Agents::Agents(const Agents& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hybridsim.Agents)
}

void Agents::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Agents::~Agents() {
  // @@protoc_insertion_point(destructor:hybridsim.Agents)
  SharedDtor();
}

void Agents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Agents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Agents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Agents_descriptor_;
}

const Agents& Agents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hybridsim_2eproto();
  return *default_instance_;
}

Agents* Agents::default_instance_ = NULL;

Agents* Agents::New(::google::protobuf::Arena* arena) const {
  Agents* n = new Agents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Agents::Clear() {
  agents_.Clear();
}

bool Agents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridsim.Agents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hybridsim.Agent agents = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_agents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_agents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_agents;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridsim.Agents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridsim.Agents)
  return false;
#undef DO_
}

void Agents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridsim.Agents)
  // repeated .hybridsim.Agent agents = 1;
  for (unsigned int i = 0, n = this->agents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agents(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hybridsim.Agents)
}

::google::protobuf::uint8* Agents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybridsim.Agents)
  // repeated .hybridsim.Agent agents = 1;
  for (unsigned int i = 0, n = this->agents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agents(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hybridsim.Agents)
  return target;
}

int Agents::ByteSize() const {
  int total_size = 0;

  // repeated .hybridsim.Agent agents = 1;
  total_size += 1 * this->agents_size();
  for (int i = 0; i < this->agents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->agents(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Agents::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Agents* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Agents>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Agents::MergeFrom(const Agents& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  agents_.MergeFrom(from.agents_);
}

void Agents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Agents::CopyFrom(const Agents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Agents::IsInitialized() const {

  return true;
}

void Agents::Swap(Agents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Agents::InternalSwap(Agents* other) {
  agents_.UnsafeArenaSwap(&other->agents_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Agents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Agents_descriptor_;
  metadata.reflection = Agents_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Agents

// repeated .hybridsim.Agent agents = 1;
int Agents::agents_size() const {
  return agents_.size();
}
void Agents::clear_agents() {
  agents_.Clear();
}
const ::hybridsim::Agent& Agents::agents(int index) const {
  // @@protoc_insertion_point(field_get:hybridsim.Agents.agents)
  return agents_.Get(index);
}
::hybridsim::Agent* Agents::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:hybridsim.Agents.agents)
  return agents_.Mutable(index);
}
::hybridsim::Agent* Agents::add_agents() {
  // @@protoc_insertion_point(field_add:hybridsim.Agents.agents)
  return agents_.Add();
}
::google::protobuf::RepeatedPtrField< ::hybridsim::Agent >*
Agents::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:hybridsim.Agents.agents)
  return &agents_;
}
const ::google::protobuf::RepeatedPtrField< ::hybridsim::Agent >&
Agents::agents() const {
  // @@protoc_insertion_point(field_list:hybridsim.Agents.agents)
  return agents_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kIdFieldNumber;
const int Trajectory::kXFieldNumber;
const int Trajectory::kYFieldNumber;
const int Trajectory::kSpdFieldNumber;
const int Trajectory::kLinkIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridsim.Trajectory)
}

void Trajectory::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hybridsim.Trajectory)
}

void Trajectory::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = 0;
  y_ = 0;
  spd_ = 0;
  linkid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:hybridsim.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trajectory_descriptor_;
}

const Trajectory& Trajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hybridsim_2eproto();
  return *default_instance_;
}

Trajectory* Trajectory::default_instance_ = NULL;

Trajectory* Trajectory::New(::google::protobuf::Arena* arena) const {
  Trajectory* n = new Trajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectory::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Trajectory*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, spd_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridsim.Trajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hybridsim.Trajectory.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_x;
        break;
      }

      // optional double x = 2;
      case 2: {
        if (tag == 17) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_y;
        break;
      }

      // optional double y = 3;
      case 3: {
        if (tag == 25) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_spd;
        break;
      }

      // optional double spd = 4;
      case 4: {
        if (tag == 33) {
         parse_spd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spd_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_linkId;
        break;
      }

      // optional string linkId = 5;
      case 5: {
        if (tag == 42) {
         parse_linkId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linkid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->linkid().data(), this->linkid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hybridsim.Trajectory.linkId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridsim.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridsim.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridsim.Trajectory)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hybridsim.Trajectory.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // optional double y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // optional double spd = 4;
  if (this->spd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->spd(), output);
  }

  // optional string linkId = 5;
  if (this->linkid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->linkid().data(), this->linkid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hybridsim.Trajectory.linkId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->linkid(), output);
  }

  // @@protoc_insertion_point(serialize_end:hybridsim.Trajectory)
}

::google::protobuf::uint8* Trajectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybridsim.Trajectory)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hybridsim.Trajectory.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // optional double y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // optional double spd = 4;
  if (this->spd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->spd(), target);
  }

  // optional string linkId = 5;
  if (this->linkid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->linkid().data(), this->linkid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hybridsim.Trajectory.linkId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->linkid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hybridsim.Trajectory)
  return target;
}

int Trajectory::ByteSize() const {
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional double x = 2;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 3;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double spd = 4;
  if (this->spd() != 0) {
    total_size += 1 + 8;
  }

  // optional string linkId = 5;
  if (this->linkid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->linkid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Trajectory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.spd() != 0) {
    set_spd(from.spd());
  }
  if (from.linkid().size() > 0) {

    linkid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkid_);
  }
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {

  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  id_.Swap(&other->id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(spd_, other->spd_);
  linkid_.Swap(&other->linkid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trajectory_descriptor_;
  metadata.reflection = Trajectory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trajectory

// optional string id = 1;
void Trajectory::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Trajectory::id() const {
  // @@protoc_insertion_point(field_get:hybridsim.Trajectory.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Trajectory::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridsim.Trajectory.id)
}
 void Trajectory::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridsim.Trajectory.id)
}
 void Trajectory::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridsim.Trajectory.id)
}
 ::std::string* Trajectory::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:hybridsim.Trajectory.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Trajectory::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Trajectory::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:hybridsim.Trajectory.id)
}

// optional double x = 2;
void Trajectory::clear_x() {
  x_ = 0;
}
 double Trajectory::x() const {
  // @@protoc_insertion_point(field_get:hybridsim.Trajectory.x)
  return x_;
}
 void Trajectory::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Trajectory.x)
}

// optional double y = 3;
void Trajectory::clear_y() {
  y_ = 0;
}
 double Trajectory::y() const {
  // @@protoc_insertion_point(field_get:hybridsim.Trajectory.y)
  return y_;
}
 void Trajectory::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Trajectory.y)
}

// optional double spd = 4;
void Trajectory::clear_spd() {
  spd_ = 0;
}
 double Trajectory::spd() const {
  // @@protoc_insertion_point(field_get:hybridsim.Trajectory.spd)
  return spd_;
}
 void Trajectory::set_spd(double value) {
  
  spd_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.Trajectory.spd)
}

// optional string linkId = 5;
void Trajectory::clear_linkid() {
  linkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Trajectory::linkid() const {
  // @@protoc_insertion_point(field_get:hybridsim.Trajectory.linkId)
  return linkid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Trajectory::set_linkid(const ::std::string& value) {
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridsim.Trajectory.linkId)
}
 void Trajectory::set_linkid(const char* value) {
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridsim.Trajectory.linkId)
}
 void Trajectory::set_linkid(const char* value, size_t size) {
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridsim.Trajectory.linkId)
}
 ::std::string* Trajectory::mutable_linkid() {
  
  // @@protoc_insertion_point(field_mutable:hybridsim.Trajectory.linkId)
  return linkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Trajectory::release_linkid() {
  
  return linkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Trajectory::set_allocated_linkid(::std::string* linkid) {
  if (linkid != NULL) {
    
  } else {
    
  }
  linkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkid);
  // @@protoc_insertion_point(field_set_allocated:hybridsim.Trajectory.linkId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectories::kTrajectoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectories::Trajectories()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridsim.Trajectories)
}

void Trajectories::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Trajectories::Trajectories(const Trajectories& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hybridsim.Trajectories)
}

void Trajectories::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Trajectories::~Trajectories() {
  // @@protoc_insertion_point(destructor:hybridsim.Trajectories)
  SharedDtor();
}

void Trajectories::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Trajectories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trajectories_descriptor_;
}

const Trajectories& Trajectories::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hybridsim_2eproto();
  return *default_instance_;
}

Trajectories* Trajectories::default_instance_ = NULL;

Trajectories* Trajectories::New(::google::protobuf::Arena* arena) const {
  Trajectories* n = new Trajectories;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectories::Clear() {
  trajectories_.Clear();
}

bool Trajectories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridsim.Trajectories)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hybridsim.Trajectory trajectories = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_trajectories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trajectories()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_trajectories;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridsim.Trajectories)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridsim.Trajectories)
  return false;
#undef DO_
}

void Trajectories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridsim.Trajectories)
  // repeated .hybridsim.Trajectory trajectories = 1;
  for (unsigned int i = 0, n = this->trajectories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trajectories(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hybridsim.Trajectories)
}

::google::protobuf::uint8* Trajectories::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybridsim.Trajectories)
  // repeated .hybridsim.Trajectory trajectories = 1;
  for (unsigned int i = 0, n = this->trajectories_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trajectories(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hybridsim.Trajectories)
  return target;
}

int Trajectories::ByteSize() const {
  int total_size = 0;

  // repeated .hybridsim.Trajectory trajectories = 1;
  total_size += 1 * this->trajectories_size();
  for (int i = 0; i < this->trajectories_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trajectories(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectories::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Trajectories* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectories>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trajectories::MergeFrom(const Trajectories& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  trajectories_.MergeFrom(from.trajectories_);
}

void Trajectories::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectories::CopyFrom(const Trajectories& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectories::IsInitialized() const {

  return true;
}

void Trajectories::Swap(Trajectories* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectories::InternalSwap(Trajectories* other) {
  trajectories_.UnsafeArenaSwap(&other->trajectories_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trajectories_descriptor_;
  metadata.reflection = Trajectories_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trajectories

// repeated .hybridsim.Trajectory trajectories = 1;
int Trajectories::trajectories_size() const {
  return trajectories_.size();
}
void Trajectories::clear_trajectories() {
  trajectories_.Clear();
}
const ::hybridsim::Trajectory& Trajectories::trajectories(int index) const {
  // @@protoc_insertion_point(field_get:hybridsim.Trajectories.trajectories)
  return trajectories_.Get(index);
}
::hybridsim::Trajectory* Trajectories::mutable_trajectories(int index) {
  // @@protoc_insertion_point(field_mutable:hybridsim.Trajectories.trajectories)
  return trajectories_.Mutable(index);
}
::hybridsim::Trajectory* Trajectories::add_trajectories() {
  // @@protoc_insertion_point(field_add:hybridsim.Trajectories.trajectories)
  return trajectories_.Add();
}
::google::protobuf::RepeatedPtrField< ::hybridsim::Trajectory >*
Trajectories::mutable_trajectories() {
  // @@protoc_insertion_point(field_mutable_list:hybridsim.Trajectories.trajectories)
  return &trajectories_;
}
const ::google::protobuf::RepeatedPtrField< ::hybridsim::Trajectory >&
Trajectories::trajectories() const {
  // @@protoc_insertion_point(field_list:hybridsim.Trajectories.trajectories)
  return trajectories_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hybridsim

// @@protoc_insertion_point(global_scope)
