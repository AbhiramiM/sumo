// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hybridsim.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hybridsim.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hybridsim {

namespace {

const ::google::protobuf::Descriptor* LeftClosedRightOpenTimeInterval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeftClosedRightOpenTimeInterval_reflection_ = NULL;
const ::google::protobuf::Descriptor* Empty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Empty_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hybridsim_2eproto() {
  protobuf_AddDesc_hybridsim_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hybridsim.proto");
  GOOGLE_CHECK(file != NULL);
  LeftClosedRightOpenTimeInterval_descriptor_ = file->message_type(0);
  static const int LeftClosedRightOpenTimeInterval_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeftClosedRightOpenTimeInterval, fromtimeincluding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeftClosedRightOpenTimeInterval, totimeexcluding_),
  };
  LeftClosedRightOpenTimeInterval_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LeftClosedRightOpenTimeInterval_descriptor_,
      LeftClosedRightOpenTimeInterval::default_instance_,
      LeftClosedRightOpenTimeInterval_offsets_,
      -1,
      -1,
      -1,
      sizeof(LeftClosedRightOpenTimeInterval),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeftClosedRightOpenTimeInterval, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeftClosedRightOpenTimeInterval, _is_default_instance_));
  Empty_descriptor_ = file->message_type(1);
  static const int Empty_offsets_[1] = {
  };
  Empty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Empty_descriptor_,
      Empty::default_instance_,
      Empty_offsets_,
      -1,
      -1,
      -1,
      sizeof(Empty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hybridsim_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LeftClosedRightOpenTimeInterval_descriptor_, &LeftClosedRightOpenTimeInterval::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Empty_descriptor_, &Empty::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hybridsim_2eproto() {
  delete LeftClosedRightOpenTimeInterval::default_instance_;
  delete LeftClosedRightOpenTimeInterval_reflection_;
  delete Empty::default_instance_;
  delete Empty_reflection_;
}

void protobuf_AddDesc_hybridsim_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017hybridsim.proto\022\thybridsim\"U\n\037LeftClos"
    "edRightOpenTimeInterval\022\031\n\021fromTimeInclu"
    "ding\030\001 \001(\001\022\027\n\017toTimeExcluding\030\002 \001(\001\"\007\n\005E"
    "mpty2j\n\020HybridSimulation\022V\n\024simulatedTim"
    "eInerval\022*.hybridsim.LeftClosedRightOpen"
    "TimeInterval\032\020.hybridsim.Empty\"\000B)\n\025de.d"
    "lr.sumo.hybridsimB\016HybridSimProtoP\000b\006pro"
    "to3", 283);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hybridsim.proto", &protobuf_RegisterTypes);
  LeftClosedRightOpenTimeInterval::default_instance_ = new LeftClosedRightOpenTimeInterval();
  Empty::default_instance_ = new Empty();
  LeftClosedRightOpenTimeInterval::default_instance_->InitAsDefaultInstance();
  Empty::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hybridsim_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hybridsim_2eproto {
  StaticDescriptorInitializer_hybridsim_2eproto() {
    protobuf_AddDesc_hybridsim_2eproto();
  }
} static_descriptor_initializer_hybridsim_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeftClosedRightOpenTimeInterval::kFromTimeIncludingFieldNumber;
const int LeftClosedRightOpenTimeInterval::kToTimeExcludingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeftClosedRightOpenTimeInterval::LeftClosedRightOpenTimeInterval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridsim.LeftClosedRightOpenTimeInterval)
}

void LeftClosedRightOpenTimeInterval::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LeftClosedRightOpenTimeInterval::LeftClosedRightOpenTimeInterval(const LeftClosedRightOpenTimeInterval& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hybridsim.LeftClosedRightOpenTimeInterval)
}

void LeftClosedRightOpenTimeInterval::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  fromtimeincluding_ = 0;
  totimeexcluding_ = 0;
}

LeftClosedRightOpenTimeInterval::~LeftClosedRightOpenTimeInterval() {
  // @@protoc_insertion_point(destructor:hybridsim.LeftClosedRightOpenTimeInterval)
  SharedDtor();
}

void LeftClosedRightOpenTimeInterval::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeftClosedRightOpenTimeInterval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeftClosedRightOpenTimeInterval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeftClosedRightOpenTimeInterval_descriptor_;
}

const LeftClosedRightOpenTimeInterval& LeftClosedRightOpenTimeInterval::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hybridsim_2eproto();
  return *default_instance_;
}

LeftClosedRightOpenTimeInterval* LeftClosedRightOpenTimeInterval::default_instance_ = NULL;

LeftClosedRightOpenTimeInterval* LeftClosedRightOpenTimeInterval::New(::google::protobuf::Arena* arena) const {
  LeftClosedRightOpenTimeInterval* n = new LeftClosedRightOpenTimeInterval;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeftClosedRightOpenTimeInterval::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LeftClosedRightOpenTimeInterval*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fromtimeincluding_, totimeexcluding_);

#undef ZR_HELPER_
#undef ZR_

}

bool LeftClosedRightOpenTimeInterval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridsim.LeftClosedRightOpenTimeInterval)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double fromTimeIncluding = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fromtimeincluding_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_toTimeExcluding;
        break;
      }

      // optional double toTimeExcluding = 2;
      case 2: {
        if (tag == 17) {
         parse_toTimeExcluding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totimeexcluding_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridsim.LeftClosedRightOpenTimeInterval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridsim.LeftClosedRightOpenTimeInterval)
  return false;
#undef DO_
}

void LeftClosedRightOpenTimeInterval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridsim.LeftClosedRightOpenTimeInterval)
  // optional double fromTimeIncluding = 1;
  if (this->fromtimeincluding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->fromtimeincluding(), output);
  }

  // optional double toTimeExcluding = 2;
  if (this->totimeexcluding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->totimeexcluding(), output);
  }

  // @@protoc_insertion_point(serialize_end:hybridsim.LeftClosedRightOpenTimeInterval)
}

::google::protobuf::uint8* LeftClosedRightOpenTimeInterval::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybridsim.LeftClosedRightOpenTimeInterval)
  // optional double fromTimeIncluding = 1;
  if (this->fromtimeincluding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->fromtimeincluding(), target);
  }

  // optional double toTimeExcluding = 2;
  if (this->totimeexcluding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->totimeexcluding(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hybridsim.LeftClosedRightOpenTimeInterval)
  return target;
}

int LeftClosedRightOpenTimeInterval::ByteSize() const {
  int total_size = 0;

  // optional double fromTimeIncluding = 1;
  if (this->fromtimeincluding() != 0) {
    total_size += 1 + 8;
  }

  // optional double toTimeExcluding = 2;
  if (this->totimeexcluding() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeftClosedRightOpenTimeInterval::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LeftClosedRightOpenTimeInterval* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LeftClosedRightOpenTimeInterval>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeftClosedRightOpenTimeInterval::MergeFrom(const LeftClosedRightOpenTimeInterval& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.fromtimeincluding() != 0) {
    set_fromtimeincluding(from.fromtimeincluding());
  }
  if (from.totimeexcluding() != 0) {
    set_totimeexcluding(from.totimeexcluding());
  }
}

void LeftClosedRightOpenTimeInterval::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeftClosedRightOpenTimeInterval::CopyFrom(const LeftClosedRightOpenTimeInterval& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeftClosedRightOpenTimeInterval::IsInitialized() const {

  return true;
}

void LeftClosedRightOpenTimeInterval::Swap(LeftClosedRightOpenTimeInterval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeftClosedRightOpenTimeInterval::InternalSwap(LeftClosedRightOpenTimeInterval* other) {
  std::swap(fromtimeincluding_, other->fromtimeincluding_);
  std::swap(totimeexcluding_, other->totimeexcluding_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeftClosedRightOpenTimeInterval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeftClosedRightOpenTimeInterval_descriptor_;
  metadata.reflection = LeftClosedRightOpenTimeInterval_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeftClosedRightOpenTimeInterval

// optional double fromTimeIncluding = 1;
void LeftClosedRightOpenTimeInterval::clear_fromtimeincluding() {
  fromtimeincluding_ = 0;
}
 double LeftClosedRightOpenTimeInterval::fromtimeincluding() const {
  // @@protoc_insertion_point(field_get:hybridsim.LeftClosedRightOpenTimeInterval.fromTimeIncluding)
  return fromtimeincluding_;
}
 void LeftClosedRightOpenTimeInterval::set_fromtimeincluding(double value) {
  
  fromtimeincluding_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.LeftClosedRightOpenTimeInterval.fromTimeIncluding)
}

// optional double toTimeExcluding = 2;
void LeftClosedRightOpenTimeInterval::clear_totimeexcluding() {
  totimeexcluding_ = 0;
}
 double LeftClosedRightOpenTimeInterval::totimeexcluding() const {
  // @@protoc_insertion_point(field_get:hybridsim.LeftClosedRightOpenTimeInterval.toTimeExcluding)
  return totimeexcluding_;
}
 void LeftClosedRightOpenTimeInterval::set_totimeexcluding(double value) {
  
  totimeexcluding_ = value;
  // @@protoc_insertion_point(field_set:hybridsim.LeftClosedRightOpenTimeInterval.toTimeExcluding)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridsim.Empty)
}

void Empty::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hybridsim.Empty)
}

void Empty::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:hybridsim.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Empty_descriptor_;
}

const Empty& Empty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hybridsim_2eproto();
  return *default_instance_;
}

Empty* Empty::default_instance_ = NULL;

Empty* Empty::New(::google::protobuf::Arena* arena) const {
  Empty* n = new Empty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Empty::Clear() {
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridsim.Empty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:hybridsim.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridsim.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridsim.Empty)
  // @@protoc_insertion_point(serialize_end:hybridsim.Empty)
}

::google::protobuf::uint8* Empty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hybridsim.Empty)
  // @@protoc_insertion_point(serialize_to_array_end:hybridsim.Empty)
  return target;
}

int Empty::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Empty* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {

  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Empty_descriptor_;
  metadata.reflection = Empty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Empty

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hybridsim

// @@protoc_insertion_point(global_scope)
